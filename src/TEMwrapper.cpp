/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


				#include "data/BgcData.h"
				#include "data/CohortData.h"
				#include "data/EnvData.h"
				#include "data/FirData.h"
				#include "data/GridData.h"
				#include "data/RegionData.h"
				#include "data/RestartData.h"
				#include "data/OutDataRegn.h"
			

				#include "inc/cohortconst.h"
				#include "inc/layerconst.h"
				#include "inc/parameters.h"
				#include "inc/temconst.h"
				#include "inc/timeconst.h"

				#include "inc/ErrorCode.h"

				#include "inc/states.h"
				#include "inc/diagnostics.h"
				#include "inc/fluxes.h"

			

				#include "lookup/CohortLookup.h"
				#include "lookup/SoilLookup.h"
			

				#include "runmodule/Cohort.h"
				#include "runmodule/Controller.h"
				#include "runmodule/Grid.h"
				#include "runmodule/ModelData.h"
				#include "runmodule/OutRetrive.h"
				#include "runmodule/Region.h"
				#include "runmodule/Timer.h"

				#include "TEMccjava.h"
								
			

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1BgcData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BgcData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BgcData *)new BgcData();
  *(BgcData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1BgcData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BgcData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (CohortData *) ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *arg2 = (vegstate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegstate_bgc **)&jarg2; 
  if (arg1) (arg1)->m_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegstate_bgc *)& ((arg1)->m_vegs);
  *(vegstate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *arg2 = (soistate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soistate_bgc **)&jarg2; 
  if (arg1) (arg1)->m_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soistate_bgc *)& ((arg1)->m_sois);
  *(soistate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *arg2 = (vegdiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegdiag_bgc **)&jarg2; 
  if (arg1) (arg1)->m_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegdiag_bgc *)& ((arg1)->m_vegd);
  *(vegdiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *arg2 = (soidiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soidiag_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soidiag_bgc *)& ((arg1)->m_soid);
  *(soidiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *arg2 = (lnd2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(lnd2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->m_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (lnd2atm_bgc *)& ((arg1)->m_l2a);
  *(lnd2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *arg2 = (atm2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->m_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2veg_bgc *)& ((arg1)->m_a2v);
  *(atm2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *arg2 = (veg2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->m_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2atm_bgc *)& ((arg1)->m_v2a);
  *(veg2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *arg2 = (veg2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->m_v2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2soi_bgc *)& ((arg1)->m_v2soi);
  *(veg2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *arg2 = (soi2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2veg_bgc *)& ((arg1)->m_soi2v);
  *(soi2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *arg2 = (veg2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->m_v2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1v2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2veg_bgc *)& ((arg1)->m_v2v);
  *(veg2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *arg2 = (soi2lnd_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2lnd_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2lnd_bgc *)& ((arg1)->m_soi2l);
  *(soi2lnd_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *arg2 = (soi2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2atm_bgc *)& ((arg1)->m_soi2a);
  *(soi2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *arg2 = (atm2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->m_a2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1a2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2soi_bgc *)& ((arg1)->m_a2soi);
  *(atm2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *arg2 = (soi2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->m_soi2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1m_1soi2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2soi_bgc *)& ((arg1)->m_soi2soi);
  *(soi2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *arg2 = (vegstate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegstate_bgc **)&jarg2; 
  if (arg1) (arg1)->y_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegstate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegstate_bgc *)& ((arg1)->y_vegs);
  *(vegstate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *arg2 = (soistate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soistate_bgc **)&jarg2; 
  if (arg1) (arg1)->y_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soistate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soistate_bgc *)& ((arg1)->y_sois);
  *(soistate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *arg2 = (vegdiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(vegdiag_bgc **)&jarg2; 
  if (arg1) (arg1)->y_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  vegdiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (vegdiag_bgc *)& ((arg1)->y_vegd);
  *(vegdiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *arg2 = (soidiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soidiag_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soidiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soidiag_bgc *)& ((arg1)->y_soid);
  *(soidiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *arg2 = (lnd2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(lnd2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->y_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  lnd2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (lnd2atm_bgc *)& ((arg1)->y_l2a);
  *(lnd2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *arg2 = (atm2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->y_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2veg_bgc *)& ((arg1)->y_a2v);
  *(atm2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *arg2 = (veg2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->y_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2atm_bgc *)& ((arg1)->y_v2a);
  *(veg2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *arg2 = (veg2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->y_v2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2soi_bgc *)& ((arg1)->y_v2soi);
  *(veg2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *arg2 = (soi2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2veg_bgc *)& ((arg1)->y_soi2v);
  *(soi2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *arg2 = (veg2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(veg2veg_bgc **)&jarg2; 
  if (arg1) (arg1)->y_v2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1v2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  veg2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (veg2veg_bgc *)& ((arg1)->y_v2v);
  *(veg2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *arg2 = (soi2lnd_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2lnd_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2lnd_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2lnd_bgc *)& ((arg1)->y_soi2l);
  *(soi2lnd_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *arg2 = (soi2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2atm_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2atm_bgc *)& ((arg1)->y_soi2a);
  *(soi2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *arg2 = (atm2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(atm2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->y_a2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1a2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  atm2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (atm2soi_bgc *)& ((arg1)->y_a2soi);
  *(atm2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *arg2 = (soi2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(soi2soi_bgc **)&jarg2; 
  if (arg1) (arg1)->y_soi2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1y_1soi2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  soi2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (soi2soi_bgc *)& ((arg1)->y_soi2soi);
  *(soi2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1prvltrfcnque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BgcData *arg1 = (BgcData *) 0 ;
  deque< double > *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  arg2 = *(deque< double > **)&jarg2; 
  {
    size_t ii;
    deque< double > *b = (deque< double > *) arg1->prvltrfcnque;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((deque< double > *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_BgcData_1prvltrfcnque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BgcData *arg1 = (BgcData *) 0 ;
  deque< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  result = (deque< double > *)(deque< double > *) ((arg1)->prvltrfcnque);
  *(deque< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1land_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->land_beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1land_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->land_endOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1veg_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->veg_beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1veg_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->veg_beginOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1veg_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->veg_endOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1veg_1endOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->veg_endOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1soil_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->soil_beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1soil_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->soil_beginOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_BgcData_1soil_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BgcData *arg1 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BgcData **)&jarg1; 
  (arg1)->soil_endOfMonth();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1CohortData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CohortData *)new CohortData();
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1CohortData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CohortData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1chtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1chtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->chtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->month);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1day_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1day_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->day);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1cmttype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->cmttype = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1cmttype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->cmttype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1yrsdist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yrsdist = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1yrsdist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->yrsdist);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1hasnonvascular_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasnonvascular = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_CohortData_1hasnonvascular_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (bool) ((arg1)->hasnonvascular);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1act_1vegset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_vegset = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1act_1vegset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->act_vegset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegyear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_SET) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->vegyear;
    for (ii = 0; ii < (size_t)MAX_VEG_SET; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegyear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->vegyear);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_VEG_SET); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_SET) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->vegtype;
    for (ii = 0; ii < (size_t)MAX_VEG_SET; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->vegtype);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_VEG_SET); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_VEG_SET) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vegfrac;
    for (ii = 0; ii < (size_t)MAX_VEG_SET; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vegfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (double *)(double *) ((arg1)->vegfrac);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_VEG_SET); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1act_1fireset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_fireset = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1act_1fireset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->act_fireset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1fireyear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_FIR_OCRNUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->fireyear;
    for (ii = 0; ii < (size_t)MAX_FIR_OCRNUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1fireyear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->fireyear);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_FIR_OCRNUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1fireseason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_FIR_OCRNUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->fireseason;
    for (ii = 0; ii < (size_t)MAX_FIR_OCRNUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1fireseason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->fireseason);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_FIR_OCRNUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1firesize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_FIR_OCRNUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->firesize;
    for (ii = 0; ii < (size_t)MAX_FIR_OCRNUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1firesize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->firesize);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_FIR_OCRNUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1fireseverity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_FIR_OCRNUM) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->fireseverity;
    for (ii = 0; ii < (size_t)MAX_FIR_OCRNUM; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1fireseverity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int *)(int *) ((arg1)->fireseverity);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_FIR_OCRNUM); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1act_1atm_1drv_1yr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_atm_drv_yr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortData_1act_1atm_1drv_1yr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (int) ((arg1)->act_atm_drv_yr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1tair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tair;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1tair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (float *)(float *) ((arg1)->tair);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->prec;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (float *)(float *) ((arg1)->prec);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1nirr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->nirr;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1nirr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (float *)(float *) ((arg1)->nirr);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vapo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ATM_DRV_YR*12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->vapo;
    for (ii = 0; ii < (size_t)MAX_ATM_DRV_YR*12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_CohortData_1vapo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (float *)(float *) ((arg1)->vapo);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_ATM_DRV_YR*12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1veg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  vegstate_dim *arg2 = (vegstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(vegstate_dim **)&jarg2; 
  if (arg1) (arg1)->d_veg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1veg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  vegstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (vegstate_dim *)& ((arg1)->d_veg);
  *(vegstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1veg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  vegstate_dim *arg2 = (vegstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(vegstate_dim **)&jarg2; 
  if (arg1) (arg1)->m_veg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1veg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  vegstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (vegstate_dim *)& ((arg1)->m_veg);
  *(vegstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1veg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  vegstate_dim *arg2 = (vegstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(vegstate_dim **)&jarg2; 
  if (arg1) (arg1)->y_veg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1veg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  vegstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (vegstate_dim *)& ((arg1)->y_veg);
  *(vegstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  vegdiag_dim *arg2 = (vegdiag_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(vegdiag_dim **)&jarg2; 
  if (arg1) (arg1)->d_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  vegdiag_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (vegdiag_dim *)& ((arg1)->d_vegd);
  *(vegdiag_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  vegdiag_dim *arg2 = (vegdiag_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(vegdiag_dim **)&jarg2; 
  if (arg1) (arg1)->m_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  vegdiag_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (vegdiag_dim *)& ((arg1)->m_vegd);
  *(vegdiag_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  vegdiag_dim *arg2 = (vegdiag_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(vegdiag_dim **)&jarg2; 
  if (arg1) (arg1)->y_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  vegdiag_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (vegdiag_dim *)& ((arg1)->y_vegd);
  *(vegdiag_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1snow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  snwstate_dim *arg2 = (snwstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(snwstate_dim **)&jarg2; 
  if (arg1) (arg1)->d_snow = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1snow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  snwstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (snwstate_dim *)& ((arg1)->d_snow);
  *(snwstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1snow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  snwstate_dim *arg2 = (snwstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(snwstate_dim **)&jarg2; 
  if (arg1) (arg1)->m_snow = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1snow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  snwstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (snwstate_dim *)& ((arg1)->m_snow);
  *(snwstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1snow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  snwstate_dim *arg2 = (snwstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(snwstate_dim **)&jarg2; 
  if (arg1) (arg1)->y_snow = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1snow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  snwstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (snwstate_dim *)& ((arg1)->y_snow);
  *(snwstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1soil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  soistate_dim *arg2 = (soistate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(soistate_dim **)&jarg2; 
  if (arg1) (arg1)->d_soil = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1d_1soil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  soistate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (soistate_dim *)& ((arg1)->d_soil);
  *(soistate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1soil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  soistate_dim *arg2 = (soistate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(soistate_dim **)&jarg2; 
  if (arg1) (arg1)->m_soil = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1m_1soil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  soistate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (soistate_dim *)& ((arg1)->m_soil);
  *(soistate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1soil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  soistate_dim *arg2 = (soistate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(soistate_dim **)&jarg2; 
  if (arg1) (arg1)->y_soil = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1y_1soil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  soistate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (soistate_dim *)& ((arg1)->y_soil);
  *(soistate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prveetmxque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(deque< double > **)&jarg2; 
  {
    size_t ii;
    deque< double > *b = (deque< double > *) arg1->prveetmxque;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((deque< double > *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prveetmxque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (deque< double > *)(deque< double > *) ((arg1)->prveetmxque);
  *(deque< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prvunnormleafmxque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(deque< double > **)&jarg2; 
  {
    size_t ii;
    deque< double > *b = (deque< double > *) arg1->prvunnormleafmxque;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((deque< double > *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prvunnormleafmxque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (deque< double > *)(deque< double > *) ((arg1)->prvunnormleafmxque);
  *(deque< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prvgrowingttimeque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(deque< double > **)&jarg2; 
  {
    size_t ii;
    deque< double > *b = (deque< double > *) arg1->prvgrowingttimeque;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((deque< double > *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1prvgrowingttimeque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (deque< double > *)(deque< double > *) ((arg1)->prvgrowingttimeque);
  *(deque< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1toptque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(deque< double > **)&jarg2; 
  {
    size_t ii;
    deque< double > *b = (deque< double > *) arg1->toptque;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((deque< double > *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1toptque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  deque< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (deque< double > *)(deque< double > *) ((arg1)->toptque);
  *(deque< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CohortData *arg1 = (CohortData *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CohortData **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortData_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortData *arg1 = (CohortData *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  result = (GridData *) ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  (arg1)->beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  (arg1)->beginOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1beginOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  (arg1)->beginOfDay();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1endOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortData *arg1 = (CohortData *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->endOfDay((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  (arg1)->endOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortData_1endOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortData *arg1 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortData **)&jarg1; 
  (arg1)->endOfYear();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1EnvData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EnvData *)new EnvData();
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1EnvData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EnvData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *arg2 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmstate_env **)&jarg2; 
  if (arg1) (arg1)->d_atms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmstate_env *)& ((arg1)->d_atms);
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *arg2 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegstate_env **)&jarg2; 
  if (arg1) (arg1)->d_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegstate_env *)& ((arg1)->d_vegs);
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *arg2 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwstate_env **)&jarg2; 
  if (arg1) (arg1)->d_snws = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwstate_env *)& ((arg1)->d_snws);
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *arg2 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soistate_env **)&jarg2; 
  if (arg1) (arg1)->d_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soistate_env *)& ((arg1)->d_sois);
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atmd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *arg2 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmdiag_env **)&jarg2; 
  if (arg1) (arg1)->d_atmd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1atmd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmdiag_env *)& ((arg1)->d_atmd);
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *arg2 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegdiag_env **)&jarg2; 
  if (arg1) (arg1)->d_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegdiag_env *)& ((arg1)->d_vegd);
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *arg2 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwdiag_env **)&jarg2; 
  if (arg1) (arg1)->d_snwd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwdiag_env *)& ((arg1)->d_snwd);
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *arg2 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soidiag_env **)&jarg2; 
  if (arg1) (arg1)->d_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soidiag_env *)& ((arg1)->d_soid);
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *arg2 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2atm_env *)& ((arg1)->d_l2a);
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *arg2 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2lnd_env **)&jarg2; 
  if (arg1) (arg1)->d_a2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2lnd_env *)& ((arg1)->d_a2l);
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *arg2 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2veg_env **)&jarg2; 
  if (arg1) (arg1)->d_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2veg_env *)& ((arg1)->d_a2v);
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *arg2 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2atm_env *)& ((arg1)->d_v2a);
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *arg2 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2gnd_env **)&jarg2; 
  if (arg1) (arg1)->d_v2g = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1v2g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2gnd_env *)& ((arg1)->d_v2g);
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *arg2 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2lnd_env **)&jarg2; 
  if (arg1) (arg1)->d_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2lnd_env *)& ((arg1)->d_soi2l);
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *arg2 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2atm_env *)& ((arg1)->d_soi2a);
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *arg2 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2atm_env **)&jarg2; 
  if (arg1) (arg1)->d_snw2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2atm_env *)& ((arg1)->d_snw2a);
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *arg2 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2soi_env **)&jarg2; 
  if (arg1) (arg1)->d_snw2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1d_1snw2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2soi_env *)& ((arg1)->d_snw2soi);
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *arg2 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmstate_env **)&jarg2; 
  if (arg1) (arg1)->m_atms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmstate_env *)& ((arg1)->m_atms);
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *arg2 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegstate_env **)&jarg2; 
  if (arg1) (arg1)->m_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegstate_env *)& ((arg1)->m_vegs);
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *arg2 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwstate_env **)&jarg2; 
  if (arg1) (arg1)->m_snws = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwstate_env *)& ((arg1)->m_snws);
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *arg2 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soistate_env **)&jarg2; 
  if (arg1) (arg1)->m_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soistate_env *)& ((arg1)->m_sois);
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atmd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *arg2 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmdiag_env **)&jarg2; 
  if (arg1) (arg1)->m_atmd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1atmd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmdiag_env *)& ((arg1)->m_atmd);
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *arg2 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegdiag_env **)&jarg2; 
  if (arg1) (arg1)->m_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegdiag_env *)& ((arg1)->m_vegd);
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *arg2 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwdiag_env **)&jarg2; 
  if (arg1) (arg1)->m_snwd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwdiag_env *)& ((arg1)->m_snwd);
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *arg2 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soidiag_env **)&jarg2; 
  if (arg1) (arg1)->m_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soidiag_env *)& ((arg1)->m_soid);
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *arg2 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2atm_env *)& ((arg1)->m_l2a);
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *arg2 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2lnd_env **)&jarg2; 
  if (arg1) (arg1)->m_a2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2lnd_env *)& ((arg1)->m_a2l);
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *arg2 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2veg_env **)&jarg2; 
  if (arg1) (arg1)->m_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2veg_env *)& ((arg1)->m_a2v);
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *arg2 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2atm_env *)& ((arg1)->m_v2a);
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *arg2 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2gnd_env **)&jarg2; 
  if (arg1) (arg1)->m_v2g = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1v2g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2gnd_env *)& ((arg1)->m_v2g);
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *arg2 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2lnd_env **)&jarg2; 
  if (arg1) (arg1)->m_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2lnd_env *)& ((arg1)->m_soi2l);
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *arg2 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2atm_env *)& ((arg1)->m_soi2a);
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *arg2 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2atm_env **)&jarg2; 
  if (arg1) (arg1)->m_snw2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2atm_env *)& ((arg1)->m_snw2a);
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *arg2 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2soi_env **)&jarg2; 
  if (arg1) (arg1)->m_snw2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1m_1snw2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2soi_env *)& ((arg1)->m_snw2soi);
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *arg2 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmstate_env **)&jarg2; 
  if (arg1) (arg1)->y_atms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmstate_env *)& ((arg1)->y_atms);
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *arg2 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegstate_env **)&jarg2; 
  if (arg1) (arg1)->y_vegs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegstate_env *)& ((arg1)->y_vegs);
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *arg2 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwstate_env **)&jarg2; 
  if (arg1) (arg1)->y_snws = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwstate_env *)& ((arg1)->y_snws);
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1sois_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *arg2 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soistate_env **)&jarg2; 
  if (arg1) (arg1)->y_sois = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1sois_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soistate_env *)& ((arg1)->y_sois);
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atmd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *arg2 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atmdiag_env **)&jarg2; 
  if (arg1) (arg1)->y_atmd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1atmd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atmdiag_env *)& ((arg1)->y_atmd);
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *arg2 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(vegdiag_env **)&jarg2; 
  if (arg1) (arg1)->y_vegd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1vegd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (vegdiag_env *)& ((arg1)->y_vegd);
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *arg2 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snwdiag_env **)&jarg2; 
  if (arg1) (arg1)->y_snwd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snwdiag_env *)& ((arg1)->y_snwd);
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *arg2 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soidiag_env **)&jarg2; 
  if (arg1) (arg1)->y_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soidiag_env *)& ((arg1)->y_soid);
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1l2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *arg2 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(lnd2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_l2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1l2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (lnd2atm_env *)& ((arg1)->y_l2a);
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *arg2 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2lnd_env **)&jarg2; 
  if (arg1) (arg1)->y_a2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2lnd_env *)& ((arg1)->y_a2l);
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *arg2 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(atm2veg_env **)&jarg2; 
  if (arg1) (arg1)->y_a2v = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1a2v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (atm2veg_env *)& ((arg1)->y_a2v);
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *arg2 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2atm_env *)& ((arg1)->y_v2a);
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *arg2 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(veg2gnd_env **)&jarg2; 
  if (arg1) (arg1)->y_v2g = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1v2g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (veg2gnd_env *)& ((arg1)->y_v2g);
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *arg2 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2lnd_env **)&jarg2; 
  if (arg1) (arg1)->y_soi2l = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2lnd_env *)& ((arg1)->y_soi2l);
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *arg2 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(soi2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (soi2atm_env *)& ((arg1)->y_soi2a);
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *arg2 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2atm_env **)&jarg2; 
  if (arg1) (arg1)->y_snw2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2atm_env *)& ((arg1)->y_snw2a);
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *arg2 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(snw2soi_env **)&jarg2; 
  if (arg1) (arg1)->y_snw2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1y_1snw2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (snw2soi_env *)& ((arg1)->y_snw2soi);
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1monthsfrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->monthsfrozen = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_EnvData_1monthsfrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (double) ((arg1)->monthsfrozen);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1rtfrozendays_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtfrozendays = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_EnvData_1rtfrozendays_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (int) ((arg1)->rtfrozendays);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1rtunfrozendays_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtunfrozendays = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_EnvData_1rtunfrozendays_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (int) ((arg1)->rtunfrozendays);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EnvData *arg1 = (EnvData *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EnvData **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_EnvData_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EnvData *arg1 = (EnvData *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  result = (CohortData *) ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1atm_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->atm_beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1veg_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->veg_beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1grnd_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->grnd_beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1atm_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->atm_beginOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1veg_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->veg_beginOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1grnd_1beginOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->grnd_beginOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1grnd_1beginOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->grnd_beginOfDay();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1atm_1endOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->atm_endOfDay((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1veg_1endOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->veg_endOfDay((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1grnd_1endOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  EnvData *arg1 = (EnvData *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->grnd_endOfDay((int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1atm_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->atm_endOfMonth();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1veg_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EnvData *arg1 = (EnvData *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->veg_endOfMonth((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_EnvData_1grnd_1endOfMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EnvData *arg1 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnvData **)&jarg1; 
  (arg1)->grnd_endOfMonth();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1FirData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FirData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FirData *)new FirData();
  *(FirData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1FirData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FirData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1useseverity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  FirData *arg1 = (FirData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useseverity = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_FirData_1useseverity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (bool) ((arg1)->useseverity);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1soid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  soidiag_fir *arg2 = (soidiag_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(soidiag_fir **)&jarg2; 
  if (arg1) (arg1)->fire_soid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1soid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  soidiag_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (soidiag_fir *)& ((arg1)->fire_soid);
  *(soidiag_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1v2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  veg2atm_fir *arg2 = (veg2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(veg2atm_fir **)&jarg2; 
  if (arg1) (arg1)->fire_v2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1v2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  veg2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (veg2atm_fir *)& ((arg1)->fire_v2a);
  *(veg2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1v2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  veg2soi_fir *arg2 = (veg2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(veg2soi_fir **)&jarg2; 
  if (arg1) (arg1)->fire_v2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1v2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  veg2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (veg2soi_fir *)& ((arg1)->fire_v2soi);
  *(veg2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1soi2a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  soi2atm_fir *arg2 = (soi2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(soi2atm_fir **)&jarg2; 
  if (arg1) (arg1)->fire_soi2a = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1soi2a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  soi2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (soi2atm_fir *)& ((arg1)->fire_soi2a);
  *(soi2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1a2soi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FirData *arg1 = (FirData *) 0 ;
  atm2soi_fir *arg2 = (atm2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FirData **)&jarg1; 
  arg2 = *(atm2soi_fir **)&jarg2; 
  if (arg1) (arg1)->fire_a2soi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_FirData_1fire_1a2soi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FirData *arg1 = (FirData *) 0 ;
  atm2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  result = (atm2soi_fir *)& ((arg1)->fire_a2soi);
  *(atm2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1beginOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->beginOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1endOfYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->endOfYear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_FirData_1burn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FirData *arg1 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FirData **)&jarg1; 
  (arg1)->burn();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1GridData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GridData *)new GridData();
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1GridData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GridData *arg1 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GridData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GridData *arg1 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1lat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lat = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_GridData_1lat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float) ((arg1)->lat);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1lon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lon = arg2;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_GridData_1lon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float) ((arg1)->lon);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1alldaylengths_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 365) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->alldaylengths;
    for (ii = 0; ii < (size_t)365; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1alldaylengths_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (float *)(float *) ((arg1)->alldaylengths);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 365); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1drgtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->drgtype = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1drgtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->drgtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1topsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->topsoil = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1topsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->topsoil);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1botsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->botsoil = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1botsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->botsoil);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1fri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fri = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_GridData_1fri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (int) ((arg1)->fri);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1pfsize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_FSIZE) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->pfsize;
    for (ii = 0; ii < (size_t)NUM_FSIZE; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1pfsize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (double *)(double *) ((arg1)->pfsize);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_FSIZE); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_GridData_1pfseason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GridData *arg1 = (GridData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_FSEASON) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->pfseason;
    for (ii = 0; ii < (size_t)NUM_FSEASON; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_GridData_1pfseason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GridData *arg1 = (GridData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GridData **)&jarg1; 
  result = (double *)(double *) ((arg1)->pfseason);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_FSEASON); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1RegionData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RegionData *)new RegionData();
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1RegionData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RegionData *arg1 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RegionData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegionData_1act_1co2yr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RegionData *arg1 = (RegionData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_co2yr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RegionData_1act_1co2yr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RegionData *arg1 = (RegionData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  result = (int) ((arg1)->act_co2yr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RegionData *arg1 = (RegionData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_CO2_DRV_YR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->co2year;
    for (ii = 0; ii < (size_t)MAX_CO2_DRV_YR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RegionData *arg1 = (RegionData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  result = (int *)(int *) ((arg1)->co2year);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_CO2_DRV_YR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  RegionData *arg1 = (RegionData *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_CO2_DRV_YR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->co2;
    for (ii = 0; ii < (size_t)MAX_CO2_DRV_YR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_RegionData_1co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  RegionData *arg1 = (RegionData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  result = (float *)(float *) ((arg1)->co2);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_CO2_DRV_YR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RegionData_1initco2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RegionData *arg1 = (RegionData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initco2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RegionData_1initco2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RegionData *arg1 = (RegionData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RegionData **)&jarg1; 
  result = (double) ((arg1)->initco2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1RestartData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RestartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RestartData *)new RestartData();
  *(RestartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1RestartData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RestartData *arg1 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RestartData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1reinitValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RestartData *arg1 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  (arg1)->reinitValue();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1chtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1chtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->chtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1dsr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dsr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1dsr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->dsr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1firea2sorgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->firea2sorgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1firea2sorgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->firea2sorgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1yrsdist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yrsdist = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1yrsdist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->yrsdist);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ifwoody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifwoody;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ifwoody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifwoody);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ifdeciwoody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifdeciwoody;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ifdeciwoody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifdeciwoody);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ifperenial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifperenial;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ifperenial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifperenial);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1nonvascular_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->nonvascular;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1nonvascular_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->nonvascular);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->vegage;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->vegage);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegcov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vegcov;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegcov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->vegcov);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->lai;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->lai);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rootfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->rootfrac);
    size_t ii = 0;
    for (; ii < MAX_ROT_LAY; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rootfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->rootfrac);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegwater_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vegwater;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegwater_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->vegwater);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vegsnow;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->vegsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->vegc);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1vegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->vegc);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1labn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->labn;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1labn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->labn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1strn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->strn);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1strn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->strn);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->deadc;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->deadc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->deadn;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1deadn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->deadn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1topt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->topt;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1topt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->topt);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1eetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eetmx;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1eetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->eetmx);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleafmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->unnormleafmx;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleafmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->unnormleafmx);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1growingttime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->growingttime;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1growingttime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->growingttime);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1foliagemx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->foliagemx;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1foliagemx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->foliagemx);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1toptA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->toptA);
    size_t ii = 0;
    for (; ii < 10; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1toptA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->toptA);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1eetmxA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->eetmxA);
    size_t ii = 0;
    for (; ii < 10; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1eetmxA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->eetmxA);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleafmxA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->unnormleafmxA);
    size_t ii = 0;
    for (; ii < 10; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1unnormleafmxA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->unnormleafmxA);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1growingttimeA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->growingttimeA);
    size_t ii = 0;
    for (; ii < 10; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1growingttimeA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->growingttimeA);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1numsnwl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numsnwl = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1numsnwl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->numsnwl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1snwextramass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snwextramass = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1snwextramass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->snwextramass);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->TSsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->TSsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->DZsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->DZsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->LIQsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->LIQsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1RHOsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->RHOsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1RHOsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->RHOsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ICEsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->ICEsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1AGEsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->AGEsnow;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1AGEsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->AGEsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1numsl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numsl = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1numsl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->numsl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1monthsfrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->monthsfrozen = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1monthsfrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->monthsfrozen);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rtfrozendays_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtfrozendays = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rtfrozendays_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->rtfrozendays);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rtunfrozendays_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtunfrozendays = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rtunfrozendays_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int) ((arg1)->rtunfrozendays);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1watertab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->watertab = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1watertab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->watertab);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->DZsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->DZsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TYPEsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->TYPEsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TYPEsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->TYPEsoil);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1AGEsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->AGEsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1AGEsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->AGEsoil);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->TSsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->TSsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->LIQsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1LIQsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->LIQsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ICEsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1ICEsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->ICEsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1FROZENFRACsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->FROZENFRACsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1FROZENFRACsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->FROZENFRACsoil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TEXTUREsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->TEXTUREsoil;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TEXTUREsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->TEXTUREsoil);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSrock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ROC_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->TSrock;
    for (ii = 0; ii < (size_t)MAX_ROC_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1TSrock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->TSrock);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_ROC_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZrock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ROC_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->DZrock;
    for (ii = 0; ii < (size_t)MAX_ROC_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1DZrock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->DZrock);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_ROC_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->frontZ;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->frontZ);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontFT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->frontFT;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1frontFT_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (int *)(int *) ((arg1)->frontFT);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1wdebrisc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wdebrisc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1wdebrisc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->wdebrisc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1dmossc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dmossc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1dmossc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->dmossc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rawc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rawc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1rawc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->rawc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1soma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->soma;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1soma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->soma);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1sompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->sompr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1sompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->sompr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1somcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->somcr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1somcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->somcr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1wdebrisn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wdebrisn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1wdebrisn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->wdebrisn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1dmossn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dmossn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_RestartData_1dmossn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double) ((arg1)->dmossn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->orgn;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->orgn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->avln;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_RestartData_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double *)(double *) ((arg1)->avln);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvltrfcnA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RestartData *arg1 = (RestartData *) 0 ;
  double (*arg2)[MAX_SOI_LAY] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  arg2 = *(double (**)[MAX_SOI_LAY])&jarg2; 
  {
    double (*inp)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg2);
    double (*dest)[MAX_SOI_LAY] = (double (*)[MAX_SOI_LAY])(arg1->prvltrfcnA);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < MAX_SOI_LAY; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_RestartData_1prvltrfcnA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RestartData *arg1 = (RestartData *) 0 ;
  double (*result)[MAX_SOI_LAY] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RestartData **)&jarg1; 
  result = (double (*)[MAX_SOI_LAY])(double (*)[MAX_SOI_LAY]) ((arg1)->prvltrfcnA);
  *(double (**)[MAX_SOI_LAY])&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1growstart_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  outvarlistkey result;
  
  (void)jenv;
  (void)jcls;
  result = (outvarlistkey)I_growstart;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1OutDataRegn(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutDataRegn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutDataRegn *)new OutDataRegn();
  *(OutDataRegn **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1OutDataRegn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutDataRegn **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1chtid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chtid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1chtid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int) ((arg1)->chtid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->status;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int *)(int *) ((arg1)->status);
  jresult = SWIG_JavaArrayOutInt(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int) ((arg1)->year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->month;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int *)(int *) ((arg1)->month);
  jresult = SWIG_JavaArrayOutInt(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1yrsdist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yrsdist = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1yrsdist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int) ((arg1)->yrsdist);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1outvarlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 78) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->outvarlist;
    for (ii = 0; ii < (size_t)78; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1outvarlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int *)(int *) ((arg1)->outvarlist);
  jresult = SWIG_JavaArrayOutInt(jenv, result, 78); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1growstart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(int (**)[NUM_PFT])&jarg2; 
  {
    int (*inp)[NUM_PFT] = (int (*)[NUM_PFT])(arg2);
    int (*dest)[NUM_PFT] = (int (*)[NUM_PFT])(arg1->growstart);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      int *ip = inp[ii];
      int *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1growstart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int (*)[NUM_PFT])(int (*)[NUM_PFT]) ((arg1)->growstart);
  *(int (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1growend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(int (**)[NUM_PFT])&jarg2; 
  {
    int (*inp)[NUM_PFT] = (int (*)[NUM_PFT])(arg2);
    int (*dest)[NUM_PFT] = (int (*)[NUM_PFT])(arg1->growend);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      int *ip = inp[ii];
      int *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1growend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int (*)[NUM_PFT])(int (*)[NUM_PFT]) ((arg1)->growend);
  *(int (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegcov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->vegcov);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegcov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->vegcov);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->vegage);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->vegage);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->lai);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->lai);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->vegc);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->vegc);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1leafc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->leafc);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1leafc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->leafc);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1stemc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->stemc);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1stemc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->stemc);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1rootc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->rootc);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1rootc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->rootc);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->vegn);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->vegn);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1labn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->labn);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1labn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->labn);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1leafn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->leafn);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1leafn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->leafn);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1stemn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->stemn);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1stemn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->stemn);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1rootn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->rootn);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1rootn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->rootn);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1gpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->gpp);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1gpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->gpp);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1npp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->npp);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1npp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->npp);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1ltrfalc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->ltrfalc);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1ltrfalc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->ltrfalc);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1ltrfaln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->ltrfaln);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1ltrfaln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->ltrfaln);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1nuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->nuptake);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1nuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->nuptake);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1permafrost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->permafrost;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1permafrost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (int *)(int *) ((arg1)->permafrost);
  jresult = SWIG_JavaArrayOutInt(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1mossdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->mossdz;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1mossdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->mossdz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1oshlwdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->oshlwdz;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1oshlwdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->oshlwdz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1odeepdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->odeepdz;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1odeepdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->odeepdz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1mineadz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->mineadz;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1mineadz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->mineadz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minebdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minebdz;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minebdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->minebdz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minecdz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minecdz;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minecdz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->minecdz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1oshlwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->oshlwc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1oshlwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->oshlwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1odeepc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->odeepc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1odeepc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->odeepc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1mineac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->mineac;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1mineac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->mineac);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minebc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minebc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minebc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->minebc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minecc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minecc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1minecc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->minecc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->orgn;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->orgn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->avln;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->avln);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1rh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rh;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1rh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->rh);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1netnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->netnmin;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1netnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->netnmin);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1orgninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->orgninput;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1orgninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->orgninput);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1avlninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->avlninput;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1avlninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->avlninput);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1doclost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->doclost;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1doclost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->doclost);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1orgnlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->orgnlost;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1orgnlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->orgnlost);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1avlnlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->avlnlost;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1avlnlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->avlnlost);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1eet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eet;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1eet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->eet);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->pet;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->pet);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1qinfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->qinfl;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1qinfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->qinfl);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1qdrain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->qdrain;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1qdrain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->qdrain);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1qrunoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->qrunoff;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1qrunoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->qrunoff);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1snwthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->snwthick;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1snwthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->snwthick);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1swe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->swe;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1swe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->swe);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1wtd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->wtd;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1wtd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->wtd);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1alc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->alc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1alc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->alc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1ald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ald;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1ald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->ald);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vwcshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->vwcshlw);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vwcdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->vwcdeep);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vwcminea;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->vwcminea);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vwcmineb;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->vwcmineb);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vwcminec;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1vwcminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->vwcminec);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tshlw);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tdeep);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tminea;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tminea);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tmineb;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tmineb);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tminec;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tminec);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->hkshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->hkshlw);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->hkdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->hkdeep);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->hkminea;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->hkminea);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->hkmineb;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->hkmineb);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->hkminec;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1hkminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->hkminec);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcshlw;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcshlw);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcdeep;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcdeep);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcminea;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcminea);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcmineb;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcmineb);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcminec;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tcminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcminec);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tbotrock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tbotrock;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1tbotrock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->tbotrock);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->burnthick;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->burnthick);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnsoic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->burnsoic;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnsoic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->burnsoic);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnvegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->burnvegc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnvegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->burnvegc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnsoin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->burnsoin;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnsoin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->burnsoin);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnvegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->burnvegn;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnvegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->burnvegn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnretainc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->burnretainc;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnretainc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->burnretainc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnretainn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->burnretainn;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_OutDataRegn_1burnretainn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  OutDataRegn *arg1 = (OutDataRegn *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutDataRegn **)&jarg1; 
  result = (double *)(double *) ((arg1)->burnretainn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1CMT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_CMT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1PFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_PFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1PFT_1PART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_PFT_PART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1leaf_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  VPARTKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (VPARTKEY)I_leaf;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1vascular_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  VASCULARKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (VASCULARKEY)I_vascular;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1DRG_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_DRG_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1FSEVR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_FSEVR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1FSEASON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_FSEASON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1FSIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_FSIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SNW_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SNW_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1MOS_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_MOS_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SLW_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SLW_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1DEP_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_DEP_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1MIN_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_MIN_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_MINETHICK_1get(JNIEnv *jenv, jclass jcls) {
  jdoubleArray jresult = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double *)(double *)MINETHICK;
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_MIN_LAY); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_MINEZONE_1get(JNIEnv *jenv, jclass jcls) {
  jintArray jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)MINEZONE;
  jresult = SWIG_JavaArrayOutInt(jenv, result, 3); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ROC_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ROC_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_ROCKTHICK_1get(JNIEnv *jenv, jclass jcls) {
  jdoubleArray jresult = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double *)(double *)ROCKTHICK;
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_ROC_LAY); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SOI_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SOI_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1GRN_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_GRN_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1NUM_1FNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_NUM_FNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ROT_1LAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ROT_LAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_ROOTTHICK_1get(JNIEnv *jenv, jclass jcls) {
  jdoubleArray jresult = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double *)(double *)ROOTTHICK;
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_ROT_LAY); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_MINSLWTHICK_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)MINSLWTHICK;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_MINDEPTHICK_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)MINDEPTHICK;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (double) ((arg1)->cmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (double) ((arg1)->nmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->cfall;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1cfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (double *)(double *) ((arg1)->cfall);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nfall;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1nfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (double *)(double *) ((arg1)->nfall);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1kra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kra = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1kra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (double) ((arg1)->kra);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1krb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->krb;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1krb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (double *)(double *) ((arg1)->krb);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1frg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->frg = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1cal_1frg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_cal **)&jarg1; 
  result = (double) ((arg1)->frg);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegpar_1cal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegpar_cal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegpar_cal *)new vegpar_cal();
  *(vegpar_cal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegpar_1cal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegpar_cal *arg1 = (vegpar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegpar_cal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1sla_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->sla;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1sla_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->sla);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1klai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->klai;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1klai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->klai);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1minleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1minleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->minleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1aleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->aleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1aleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->aleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1bleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->bleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1bleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->bleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1cleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->cleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1cleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->cleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1kfoliage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kfoliage;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1kfoliage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->kfoliage);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1cov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->cov;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1cov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->cov);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m1;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->m1);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m2;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->m2);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m3;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->m3);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m4;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1dim_1m4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->m4);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegpar_1dim(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegpar_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegpar_dim *)new vegpar_dim();
  *(vegpar_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegpar_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegpar_dim *arg1 = (vegpar_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegpar_dim **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1albvisnir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->albvisnir = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1albvisnir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->albvisnir);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1er_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->er = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1er_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->er);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ircoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ircoef = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ircoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->ircoef);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1iscoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->iscoef = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1iscoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->iscoef);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1glmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->glmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1glmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->glmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1bl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gl_bl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1bl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->gl_bl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gl_c = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1gl_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->gl_c);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1open_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vpd_open = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1open_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->vpd_open);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1close_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vpd_close = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1vpd_1close_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->vpd_close);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ppfd50_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ppfd50 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1env_1ppfd50_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_env **)&jarg1; 
  result = (double) ((arg1)->ppfd50);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegpar_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegpar_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegpar_env *)new vegpar_env();
  *(vegpar_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegpar_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegpar_env *arg1 = (vegpar_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegpar_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cpart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->cpart;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1cpart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->cpart);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2neven_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->c2neven;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2neven_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->c2neven);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2na_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->c2na = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2na_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->c2na);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->c2nb;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->c2nb);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->c2nmin;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1c2nmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->c2nmin);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1dc2n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dc2n = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1dc2n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->dc2n);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1labncon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->labncon = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1labncon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->labncon);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->raq10a0 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->raq10a0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->raq10a1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->raq10a1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->raq10a2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->raq10a2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->raq10a3 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1raq10a3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->raq10a3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1kc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->kc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1ki_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ki = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1ki_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->ki);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->tmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1tmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->tmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->toptmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->toptmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->toptmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1toptmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->toptmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1knuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->knuptake = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegpar_1bgc_1knuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegpar_bgc **)&jarg1; 
  result = (double) ((arg1)->knuptake);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegpar_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegpar_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegpar_bgc *)new vegpar_bgc();
  *(vegpar_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegpar_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegpar_bgc *arg1 = (vegpar_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegpar_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1micbnup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->micbnup = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1micbnup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (double) ((arg1)->micbnup);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcmoss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcmoss = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcmoss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (double) ((arg1)->kdcmoss);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcrawc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcrawc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcrawc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (double) ((arg1)->kdcrawc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcsoma = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (double) ((arg1)->kdcsoma);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcsompr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (double) ((arg1)->kdcsompr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcsomcr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1cal_1kdcsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_cal **)&jarg1; 
  result = (double) ((arg1)->kdcsomcr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soipar_1cal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soipar_cal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soipar_cal *)new soipar_cal();
  *(soipar_cal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soipar_1cal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soipar_cal *arg1 = (soipar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soipar_cal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1maxmossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxmossthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1maxmossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->maxmossthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1minmossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minmossthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1minmossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->minmossthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefmossa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefmossa = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefmossa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefmossa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefmossb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefmossb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefmossb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefmossb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1minshlwthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minshlwthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1minshlwthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->minshlwthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefshlwa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefshlwa = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefshlwa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefshlwa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefshlwb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefshlwb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefshlwb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefshlwb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1mindeepthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mindeepthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1mindeepthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->mindeepthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefdeepa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefdeepa = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefdeepa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefdeepa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefdeepb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefdeepb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefdeepb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefdeepb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefminea = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefminea);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefmineb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1dim_1coefmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_dim **)&jarg1; 
  result = (double) ((arg1)->coefmineb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soipar_1dim(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soipar_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soipar_dim *)new soipar_dim();
  *(soipar_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soipar_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soipar_dim *arg1 = (soipar_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soipar_dim **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rtdp4gdd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rtdp4gdd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1rtdp4gdd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (double) ((arg1)->rtdp4gdd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1psimax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->psimax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1psimax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (double) ((arg1)->psimax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1evapmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evapmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1evapmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (double) ((arg1)->evapmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1drainmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->drainmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1env_1drainmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_env *arg1 = (soipar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_env **)&jarg1; 
  result = (double) ((arg1)->drainmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soipar_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soipar_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soipar_env *)new soipar_env();
  *(soipar_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soipar_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soipar_env *arg1 = (soipar_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soipar_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kn2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kn2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kn2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->kn2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->moistmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->moistmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->moistmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->moistmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistopt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->moistopt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1moistopt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->moistopt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rhq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhq10 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1rhq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->rhq10);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1propftos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->propftos = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1propftos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->propftos);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1nmincnsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nmincnsoil = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1nmincnsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->nmincnsoil);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fnloss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fnloss = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fnloss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->fnloss);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fsoma = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->fsoma);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fsompr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->fsompr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fsomcr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1fsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->fsomcr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1som2co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->som2co2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1som2co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->som2co2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqrawc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eqrawc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqrawc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->eqrawc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eqsoma = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->eqsoma);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eqsompr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->eqsompr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eqsomcr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1eqsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->eqsomcr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdmoss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdmoss = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdmoss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->kdmoss);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1lcclnc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lcclnc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1lcclnc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double) ((arg1)->lcclnc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdrawc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kdrawc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdrawc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kdrawc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kdsoma;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kdsoma);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kdsompr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kdsompr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kdsomcr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soipar_1bgc_1kdsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soipar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kdsomcr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soipar_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soipar_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soipar_bgc *)new soipar_bgc();
  *(soipar_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soipar_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soipar_bgc *arg1 = (soipar_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soipar_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1dim_1newden_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwpar_dim *arg1 = (snwpar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->newden = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwpar_1dim_1newden_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwpar_dim *arg1 = (snwpar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_dim **)&jarg1; 
  result = (double) ((arg1)->newden);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1dim_1denmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwpar_dim *arg1 = (snwpar_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->denmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwpar_1dim_1denmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwpar_dim *arg1 = (snwpar_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_dim **)&jarg1; 
  result = (double) ((arg1)->denmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwpar_1dim(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwpar_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwpar_dim *)new snwpar_dim();
  *(snwpar_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwpar_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwpar_dim *arg1 = (snwpar_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwpar_dim **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->albmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  result = (double) ((arg1)->albmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->albmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwpar_1env_1albmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwpar_env **)&jarg1; 
  result = (double) ((arg1)->albmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwpar_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwpar_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwpar_env *)new snwpar_env();
  *(snwpar_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwpar_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwpar_env *arg1 = (snwpar_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwpar_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1vsmburn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vsmburn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1vsmburn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  result = (double) ((arg1)->vsmburn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1foslburn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_FSEVR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->foslburn;
    for (ii = 0; ii < (size_t)NUM_FSEVR; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1foslburn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->foslburn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_FSEVR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1fvcomb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->fvcomb);
    size_t ii = 0;
    for (; ii < NUM_FSEVR; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1fvcomb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->fvcomb);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1fvdead_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->fvdead);
    size_t ii = 0;
    for (; ii < NUM_FSEVR; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1fvdead_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->fvdead);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1r_1retain_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->r_retain_c = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1r_1retain_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  result = (double) ((arg1)->r_retain_c);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1r_1retain_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->r_retain_n = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_firepar_1bgc_1r_1retain_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(firepar_bgc **)&jarg1; 
  result = (double) ((arg1)->r_retain_n);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1firepar_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  firepar_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (firepar_bgc *)new firepar_bgc();
  *(firepar_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1firepar_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  firepar_bgc *arg1 = (firepar_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(firepar_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1VEG_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_VEG_STATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1SOI_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_SOI_STATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAXSTATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAXSTATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1VEG_1FLUX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_VEG_FLUX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUM_1SOI_1FLUX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_SOI_FLUX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUMEQ_1VEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUMEQ_VEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUMEQ_1SOI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUMEQ_SOI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_NUMEQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUMEQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_DYINY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)DYINY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MINY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MINY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_DINM_1get(JNIEnv *jenv, jclass jcls) {
  jintArray jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)DINM;
  jresult = SWIG_JavaArrayOutInt(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_DOYINDFST_1get(JNIEnv *jenv, jclass jcls) {
  jintArray jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)DOYINDFST;
  jresult = SWIG_JavaArrayOutInt(jenv, result, 12); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1FSIZE_1DRV_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_FSIZE_DRV_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1CO2_1DRV_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_CO2_DRV_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ATM_1DRV_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ATM_DRV_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ATM_1NOM_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ATM_NOM_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1VEG_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_VEG_SET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MIN_1EQ_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MIN_EQ_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1EQ_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_EQ_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SP_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SP_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BEG_1TR_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BEG_TR_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_END_1TR_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)END_TR_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BEG_1SC_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BEG_SC_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_END_1SC_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)END_SC_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_END_1SP_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)END_SP_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_BEG_1SP_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BEG_SP_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1TR_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_TR_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SC_1YR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SC_YR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1FIR_1OCRNUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_FIR_OCRNUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1VAR_1NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_VAR_NULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1TEM_1TSTEP_1SMALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_TEM_TSTEP_SMALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1WAT_1TSTEP_1SMALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_WAT_TSTEP_SMALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1TOO_1MANY_1FRZ_1FRONTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_TOO_MANY_FRZ_FRONTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1NIMMOB_1RANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_NIMMOB_RANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1BURN_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_BURN_ZERO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1LAYER_1FIRST_1DEEP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_LAYER_FIRST_DEEP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_I_1NCFILE_1NOT_1EXIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ERRORKEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ERRORKEY)I_NCFILE_NOT_EXIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MISSING_1I_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MISSING_I;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_TEMJNI_temcoreJNI_MISSING_1F_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)MISSING_F;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_MISSING_1D_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)MISSING_D;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->co2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  result = (double) ((arg1)->co2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1ta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1ta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  result = (double) ((arg1)->ta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1dsr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dsr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_atmstate_1env_1dsr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmstate_env **)&jarg1; 
  result = (int) ((arg1)->dsr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atmstate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atmstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atmstate_env *)new atmstate_env();
  *(atmstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atmstate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atmstate_env *arg1 = (atmstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atmstate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1vegage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->vegage;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1vegage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->vegage);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1ifwoody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifwoody;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1ifwoody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifwoody);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1ifdeciwoody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifdeciwoody;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1ifdeciwoody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifdeciwoody);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1ifperenial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifperenial;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1ifperenial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifperenial);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1nonvascular_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->nonvascular;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1nonvascular_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->nonvascular);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1vegcov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vegcov;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1vegcov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->vegcov);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->lai;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->lai);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1fpc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->fpc;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1fpc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->fpc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1frootfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->frootfrac);
    size_t ii = 0;
    for (; ii < MAX_ROT_LAY; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_vegstate_1dim_1frootfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_dim **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->frootfrac);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegstate_1dim(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegstate_dim *)new vegstate_dim();
  *(vegstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegstate_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegstate_dim *arg1 = (vegstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegstate_dim **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1snow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snow = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1snow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  result = (double) ((arg1)->snow);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1rwater_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rwater = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1env_1rwater_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_env **)&jarg1; 
  result = (double) ((arg1)->rwater);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegstate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegstate_env *)new vegstate_env();
  *(vegstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegstate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegstate_env *arg1 = (vegstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegstate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1call_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->call = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1call_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->call);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->c;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->c);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1nall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1nall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->nall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1labn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->labn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1labn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->labn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1strnall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->strnall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1strnall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->strnall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1strn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->strn;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1strn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->strn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deadc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->deadc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deadn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegstate_1bgc_1deadn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegstate_bgc **)&jarg1; 
  result = (double) ((arg1)->deadn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegstate_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegstate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegstate_bgc *)new vegstate_bgc();
  *(vegstate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegstate_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegstate_bgc *arg1 = (vegstate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegstate_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1numsnwl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numsnwl = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1numsnwl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (int) ((arg1)->numsnwl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1olds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->olds = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1olds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double) ((arg1)->olds);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1thick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->thick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1thick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double) ((arg1)->thick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1dense_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dense = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1dense_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double) ((arg1)->dense);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1extramass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->extramass = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1extramass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double) ((arg1)->extramass);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1dz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->dz;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1dz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->dz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1age_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->age;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1age_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->age);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1rho_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rho;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1rho_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->rho);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1por_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->por;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1dim_1por_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->por);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwstate_1dim(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwstate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwstate_dim *)new snwstate_dim();
  *(snwstate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwstate_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwstate_dim *arg1 = (snwstate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwstate_dim **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1tsnw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tsnw;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1tsnw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->tsnw);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1swe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->swe;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1swe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->swe);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1snwliq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->snwliq;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1snwliq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->snwliq);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1snwice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->snwice;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1snwice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->snwice);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1extraswe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->extraswe = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1extraswe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double) ((arg1)->extraswe);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1swesum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swesum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1swesum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double) ((arg1)->swesum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1tsnwave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tsnwave = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwstate_1env_1tsnwave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwstate_env **)&jarg1; 
  result = (double) ((arg1)->tsnwave);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwstate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwstate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwstate_env *)new snwstate_env();
  *(snwstate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwstate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwstate_env *arg1 = (snwstate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwstate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1numsl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numsl = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1numsl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int) ((arg1)->numsl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mossnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mossnum = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mossnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int) ((arg1)->mossnum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1shlwnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->shlwnum = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1shlwnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int) ((arg1)->shlwnum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1deepnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deepnum = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1deepnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int) ((arg1)->deepnum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1minenum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minenum = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1minenum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int) ((arg1)->minenum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mosstype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mosstype = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mosstype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int) ((arg1)->mosstype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1totthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->totthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1totthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double) ((arg1)->totthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mossthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double) ((arg1)->mossthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1shlwthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shlwthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1shlwthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double) ((arg1)->shlwthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1deepthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deepthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1deepthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double) ((arg1)->deepthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mineathick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mineathick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1mineathick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double) ((arg1)->mineathick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1minebthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minebthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1minebthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double) ((arg1)->minebthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1minecthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minecthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1minecthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double) ((arg1)->minecthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->z;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->z);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1dz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->dz;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1dz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->dz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1por_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->por;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1por_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->por);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1age_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->age;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1age_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->age);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->type;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->type);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1texture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->texture;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1texture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (int *)(int *) ((arg1)->texture);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1frootfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->frootfrac);
    size_t ii = 0;
    for (; ii < MAX_SOI_LAY; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_soistate_1dim_1frootfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_dim **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->frootfrac);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soistate_1dim(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soistate_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soistate_dim *)new soistate_dim();
  *(soistate_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soistate_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soistate_dim *arg1 = (soistate_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soistate_dim **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1frozenfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->frozenfrac;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1frozenfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->frozenfrac);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ts;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->ts);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->liq;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->liq);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ice;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1ice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->ice);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1trock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_ROC_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->trock;
    for (ii = 0; ii < (size_t)MAX_ROC_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1trock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->trock);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_ROC_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1frontstype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->frontstype;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1frontstype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (int *)(int *) ((arg1)->frontstype);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1frontsz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_NUM_FNT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->frontsz;
    for (ii = 0; ii < (size_t)MAX_NUM_FNT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1frontsz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->frontsz);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_NUM_FNT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1watertab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->watertab = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1watertab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double) ((arg1)->watertab);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1draindepth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->draindepth = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1env_1draindepth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_env *arg1 = (soistate_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_env **)&jarg1; 
  result = (double) ((arg1)->draindepth);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soistate_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soistate_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soistate_env *)new soistate_env();
  *(soistate_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soistate_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soistate_env *arg1 = (soistate_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soistate_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1wdebrisc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wdebrisc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1wdebrisc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double) ((arg1)->wdebrisc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1wdebrisn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wdebrisn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1wdebrisn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double) ((arg1)->wdebrisn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1dmossc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dmossc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1dmossc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double) ((arg1)->dmossc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1dmossn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dmossn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1dmossn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double) ((arg1)->dmossn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1rawc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rawc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1rawc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rawc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1soma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->soma;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1soma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->soma);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1sompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->sompr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1sompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->sompr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1somcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->somcr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1somcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->somcr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->orgn;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->orgn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1avln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->avln;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soistate_1bgc_1avln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soistate_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->avln);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soistate_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soistate_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soistate_bgc *)new soistate_bgc();
  *(soistate_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soistate_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soistate_bgc *arg1 = (soistate_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soistate_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vpd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vpd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vpd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->vpd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1vp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->vp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1svp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->svp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atmdiag_1env_1svp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atmdiag_env **)&jarg1; 
  result = (double) ((arg1)->svp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atmdiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atmdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atmdiag_env *)new atmdiag_env();
  *(atmdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atmdiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atmdiag_env *arg1 = (atmdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atmdiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1fpcsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fpcsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1fpcsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double) ((arg1)->fpcsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1growingttime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->growingttime;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1growingttime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->growingttime);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1maxleafc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->maxleafc;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1maxleafc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->maxleafc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1fleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->fleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1fleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->fleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1unnormleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->unnormleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1unnormleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->unnormleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1eetmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->eetmx;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1eetmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->eetmx);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1unnormleafmx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->unnormleafmx;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1unnormleafmx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->unnormleafmx);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1topt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->topt;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1topt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->topt);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1ffoliage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ffoliage;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1ffoliage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->ffoliage);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1foliagemx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->foliagemx;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1dim_1foliagemx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_dim **)&jarg1; 
  result = (double *)(double *) ((arg1)->foliagemx);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegdiag_1dim(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegdiag_dim *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegdiag_dim *)new vegdiag_dim();
  *(vegdiag_dim **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegdiag_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegdiag_dim *arg1 = (vegdiag_dim *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegdiag_dim **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1btran_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->btran = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1btran_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->btran);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1rc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->rc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1cc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1cc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->cc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1ppfd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ppfd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1ppfd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->m_ppfd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1vpd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_vpd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1env_1m_1vpd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_env **)&jarg1; 
  result = (double) ((arg1)->m_vpd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegdiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegdiag_env *)new vegdiag_env();
  *(vegdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegdiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegdiag_env *arg1 = (vegdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegdiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1raq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->raq10 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1raq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->raq10);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1ftemp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ftemp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1ftemp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->ftemp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1gv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gv = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1gv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->gv);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1kr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kr;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1kr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->kr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fna_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fna = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fna_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->fna);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fca_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fca = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_vegdiag_1bgc_1fca_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  result = (double) ((arg1)->fca);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1vegdiag_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vegdiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vegdiag_bgc *)new vegdiag_bgc();
  *(vegdiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1vegdiag_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vegdiag_bgc *arg1 = (vegdiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vegdiag_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1snowfreeFst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->snowfreeFst = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1snowfreeFst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  result = (int) ((arg1)->snowfreeFst);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1snowfreeLst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->snowfreeLst = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1snowfreeLst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  result = (int) ((arg1)->snowfreeLst);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1tcond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SNW_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcond;
    for (ii = 0; ii < (size_t)MAX_SNW_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1tcond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcond);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SNW_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1fcmelt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fcmelt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snwdiag_1env_1fcmelt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snwdiag_env **)&jarg1; 
  result = (double) ((arg1)->fcmelt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snwdiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snwdiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snwdiag_env *)new snwdiag_env();
  *(snwdiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snwdiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snwdiag_env *arg1 = (snwdiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snwdiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1permafrost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->permafrost = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1permafrost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->permafrost);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1unfrzcolumn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->unfrzcolumn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1unfrzcolumn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->unfrzcolumn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1alc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->alc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1alc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->alc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1ald_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ald = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1ald_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->ald);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rtdpts = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->rtdpts);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpthawpct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rtdpthawpct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpthawpct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->rtdpthawpct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpgdd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rtdpgdd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpgdd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->rtdpgdd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpgrowstart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtdpgrowstart = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpgrowstart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->rtdpgrowstart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpgrowend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtdpgrowend = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1rtdpgrowend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (int) ((arg1)->rtdpgrowend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1nfactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nfactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1nfactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->nfactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vwc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->vwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1iwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->iwc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1iwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->iwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1lwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->lwc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1lwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->lwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1sws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->sws;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1sws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->sws);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1aws_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->aws;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1aws_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->aws);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1minliq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minliq;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1minliq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->minliq);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tcond;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->tcond);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hcond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->hcond;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hcond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->hcond);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1fbtran_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->fbtran;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1fbtran_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double *)(double *) ((arg1)->fbtran);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tsave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tsave = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tsave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tsave);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tshlw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tshlw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tdeep = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tdeep);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tminea = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tminea);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tmineb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tmineb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tminec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tminec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tbotrock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tbotrock = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tbotrock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tbotrock);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tcshlw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tcshlw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tcdeep = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tcdeep);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tcminea = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tcminea);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tcmineb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tcmineb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tcminec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1tcminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->tcminec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1frasat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->frasat = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1frasat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->frasat);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1liqsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->liqsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1liqsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->liqsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1icesum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->icesum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1icesum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->icesum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vwcshlw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->vwcshlw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vwcdeep = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->vwcdeep);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vwcminea = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->vwcminea);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vwcmineb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->vwcmineb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vwcminec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1vwcminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->vwcminec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkshlw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->hkshlw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkshlw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->hkshlw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkdeep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->hkdeep = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkdeep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->hkdeep);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->hkminea = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->hkminea);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->hkmineb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->hkmineb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->hkminec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1env_1hkminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_env **)&jarg1; 
  result = (double) ((arg1)->hkminec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soidiag_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soidiag_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soidiag_env *)new soidiag_env();
  *(soidiag_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soidiag_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soidiag_env *arg1 = (soidiag_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soidiag_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1knmoist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->knmoist;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1knmoist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->knmoist);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhmoist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhmoist;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhmoist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhmoist);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhq10;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rhq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhq10);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1ltrfcn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ltrfcn;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1ltrfcn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->ltrfcn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1tsomc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tsomc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1tsomc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->tsomc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1shlwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shlwc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1shlwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->shlwc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1deepc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deepc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1deepc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->deepc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1mineac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mineac = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1mineac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->mineac);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1minebc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minebc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1minebc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->minebc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1minecc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minecc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1minecc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->minecc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rawcsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rawcsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1rawcsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->rawcsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1somasum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->somasum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1somasum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->somasum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1somprsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->somprsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1somprsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->somprsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1somcrsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->somcrsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1somcrsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->somcrsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1orgnsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgnsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1orgnsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->orgnsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1avlnsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->avlnsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1bgc_1avlnsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_bgc **)&jarg1; 
  result = (double) ((arg1)->avlnsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soidiag_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soidiag_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soidiag_bgc *)new soidiag_bgc();
  *(soidiag_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soidiag_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soidiag_bgc *arg1 = (soidiag_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soidiag_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soidiag_1fir_1burnthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soidiag_fir *arg1 = (soidiag_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->burnthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soidiag_1fir_1burnthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soidiag_fir *arg1 = (soidiag_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soidiag_fir **)&jarg1; 
  result = (double) ((arg1)->burnthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soidiag_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soidiag_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soidiag_fir *)new soidiag_fir();
  *(soidiag_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soidiag_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soidiag_fir *arg1 = (soidiag_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soidiag_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1eet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1eet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  result = (double) ((arg1)->eet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1env_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_env **)&jarg1; 
  result = (double) ((arg1)->pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1lnd2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lnd2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lnd2atm_env *)new lnd2atm_env();
  *(lnd2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1lnd2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lnd2atm_env *arg1 = (lnd2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lnd2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1bgc_1nep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lnd2atm_bgc *arg1 = (lnd2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nep = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_lnd2atm_1bgc_1nep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lnd2atm_bgc *arg1 = (lnd2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lnd2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->nep);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1lnd2atm_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lnd2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lnd2atm_bgc *)new lnd2atm_bgc();
  *(lnd2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1lnd2atm_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lnd2atm_bgc *arg1 = (lnd2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lnd2atm_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1prec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->prec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1prec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->prec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1snfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1snfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->snfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1rnfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rnfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1rnfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->rnfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1nirr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nirr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1nirr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->nirr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1par_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->par = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2lnd_1env_1par_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2lnd_env **)&jarg1; 
  result = (double) ((arg1)->par);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2lnd_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2lnd_env *)new atm2lnd_env();
  *(atm2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2lnd_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2lnd_env *arg1 = (atm2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2lnd_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1rnfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rnfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1rnfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->rnfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1snfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1snfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->snfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1rinter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rinter = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1rinter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->rinter);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1sinter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sinter = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1sinter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->sinter);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1swdown_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swdown = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1swdown_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->swdown);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1swinter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swinter = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1swinter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->swinter);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1pardown_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pardown = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1pardown_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->pardown);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1parabsorb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->parabsorb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1env_1parabsorb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_env **)&jarg1; 
  result = (double) ((arg1)->parabsorb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2veg_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2veg_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2veg_env *)new atm2veg_env();
  *(atm2veg_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2veg_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2veg_env *arg1 = (atm2veg_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2veg_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1ingppall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ingppall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1ingppall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->ingppall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1ingpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ingpp;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1ingpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->ingpp);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1gppall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->gppall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1gppall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->gppall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1gpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->gpp;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1gpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->gpp);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1innppall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->innppall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1innppall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->innppall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1innpp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->innpp;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1innpp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->innpp);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1nppall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nppall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1nppall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->nppall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1npp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->npp;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_atm2veg_1bgc_1npp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->npp);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2veg_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2veg_bgc *)new atm2veg_bgc();
  *(atm2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2veg_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2veg_bgc *arg1 = (atm2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2veg_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1tran_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tran = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1tran_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->tran);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evap = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->evap);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1tran_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tran_pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1tran_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->tran_pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evap_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evap_pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1evap_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->evap_pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1sublim_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sublim = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1sublim_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->sublim);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1swrefl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swrefl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1env_1swrefl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_env **)&jarg1; 
  result = (double) ((arg1)->swrefl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2atm_env *)new veg2atm_env();
  *(veg2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2atm_env *arg1 = (veg2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rmall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rmall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rmall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rmall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rm;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rm);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rgall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rgall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rgall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rgall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rg;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1bgc_1rg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rg);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2atm_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2atm_bgc *)new veg2atm_bgc();
  *(veg2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2atm_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2atm_bgc *arg1 = (veg2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2atm_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rthfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->rthfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sthfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->sthfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rdrip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rdrip = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1rdrip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->rdrip);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sdrip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sdrip = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1sdrip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->sdrip);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1swthfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swthfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2gnd_1env_1swthfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2gnd_env **)&jarg1; 
  result = (double) ((arg1)->swthfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2gnd_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2gnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2gnd_env *)new veg2gnd_env();
  *(veg2gnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2gnd_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2gnd_env *arg1 = (veg2gnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2gnd_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1rtlfalfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rtlfalfrac;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1rtlfalfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rtlfalfrac);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1d2wdebrisc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->d2wdebrisc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1d2wdebrisc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->d2wdebrisc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalcall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ltrfalcall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalcall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->ltrfalcall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1mossdeathc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mossdeathc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1mossdeathc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->mossdeathc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ltrfalc;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->ltrfalc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1d2wdebrisn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->d2wdebrisn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1d2wdebrisn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->d2wdebrisn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalnall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ltrfalnall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfalnall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->ltrfalnall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1mossdeathn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mossdeathn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1mossdeathn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->mossdeathn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfaln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ltrfaln;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1bgc_1ltrfaln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->ltrfaln);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2soi_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2soi_bgc *)new veg2soi_bgc();
  *(veg2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2soi_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2soi_bgc *arg1 = (veg2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2soi_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1innuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->innuptake = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1innuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->innuptake);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1lnuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lnuptake = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1lnuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->lnuptake);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1snuptakeall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snuptakeall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1snuptakeall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->snuptakeall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1snuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->snuptake;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1snuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->snuptake);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1nextract_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nextract;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2veg_1bgc_1nextract_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->nextract);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2veg_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2veg_bgc *)new soi2veg_bgc();
  *(soi2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2veg_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2veg_bgc *arg1 = (soi2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2veg_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nmobilall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nmobilall = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nmobilall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->nmobilall);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nmobil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nmobil;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nmobil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->nmobil);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nresorball_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nresorball = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nresorball_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  result = (double) ((arg1)->nresorball);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nresorb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nresorb;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_veg2veg_1bgc_1nresorb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->nresorb);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2veg_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2veg_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2veg_bgc *)new veg2veg_bgc();
  *(veg2veg_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2veg_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2veg_bgc *arg1 = (veg2veg_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2veg_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qinfl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->qinfl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qinfl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  result = (double) ((arg1)->qinfl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qover_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->qover = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qover_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  result = (double) ((arg1)->qover);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qdrain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->qdrain = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1env_1qdrain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_env **)&jarg1; 
  result = (double) ((arg1)->qdrain);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2lnd_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2lnd_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2lnd_env *)new soi2lnd_env();
  *(soi2lnd_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2lnd_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2lnd_env *arg1 = (soi2lnd_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2lnd_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1doclost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->doclost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1doclost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  result = (double) ((arg1)->doclost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1avlnlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->avlnlost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1avlnlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  result = (double) ((arg1)->avlnlost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1orgnlost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgnlost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2lnd_1bgc_1orgnlost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  result = (double) ((arg1)->orgnlost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2lnd_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2lnd_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2lnd_bgc *)new soi2lnd_bgc();
  *(soi2lnd_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2lnd_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2lnd_bgc *arg1 = (soi2lnd_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2lnd_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1evap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evap = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1evap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  result = (double) ((arg1)->evap);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1evap_1pet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evap_pet = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1evap_1pet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  result = (double) ((arg1)->evap_pet);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1swrefl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swrefl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1env_1swrefl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_env **)&jarg1; 
  result = (double) ((arg1)->swrefl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2atm_env *)new soi2atm_env();
  *(soi2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2atm_env *arg1 = (soi2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhwdeb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhwdeb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhwdeb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rhwdeb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhmossc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhmossc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhmossc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rhmossc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhrawc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhrawc;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhrawc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhrawc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhsoma;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhsoma);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhsompr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhsompr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->rhsomcr;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->rhsomcr);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhrawcsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhrawcsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhrawcsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rhrawcsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomasum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhsomasum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomasum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rhsomasum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomprsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhsomprsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomprsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rhsomprsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomcrsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhsomcrsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhsomcrsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rhsomcrsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhtot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhtot = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1bgc_1rhtot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  result = (double) ((arg1)->rhtot);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2atm_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2atm_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2atm_bgc *)new soi2atm_bgc();
  *(soi2atm_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2atm_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2atm_bgc *arg1 = (soi2atm_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2atm_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1sublim_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sublim = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1sublim_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  result = (double) ((arg1)->sublim);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1swrefl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->swrefl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snw2atm_1env_1swrefl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2atm_env **)&jarg1; 
  result = (double) ((arg1)->swrefl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snw2atm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snw2atm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snw2atm_env *)new snw2atm_env();
  *(snw2atm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snw2atm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snw2atm_env *arg1 = (snw2atm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snw2atm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_snw2soi_1env_1melt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  snw2soi_env *arg1 = (snw2soi_env *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2soi_env **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->melt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_snw2soi_1env_1melt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  snw2soi_env *arg1 = (snw2soi_env *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(snw2soi_env **)&jarg1; 
  result = (double) ((arg1)->melt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1snw2soi_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  snw2soi_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (snw2soi_env *)new snw2soi_env();
  *(snw2soi_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1snw2soi_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  snw2soi_env *arg1 = (snw2soi_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(snw2soi_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1orgcinput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgcinput = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1orgcinput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->orgcinput);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1orgninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgninput = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1orgninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->orgninput);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1avlninput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->avlninput = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1bgc_1avlninput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->avlninput);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2soi_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2soi_bgc *)new atm2soi_bgc();
  *(atm2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2soi_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2soi_bgc *arg1 = (atm2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2soi_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1netnmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->netnmin;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1netnmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->netnmin);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1nimmob_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOI_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nimmob;
    for (ii = 0; ii < (size_t)MAX_SOI_LAY; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1nimmob_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  result = (double *)(double *) ((arg1)->nimmob);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, MAX_SOI_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1netnminsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->netnminsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1netnminsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->netnminsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1nimmobsum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nimmobsum = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2soi_1bgc_1nimmobsum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  result = (double) ((arg1)->nimmobsum);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2soi_1bgc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2soi_bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2soi_bgc *)new soi2soi_bgc();
  *(soi2soi_bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2soi_1bgc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2soi_bgc *arg1 = (soi2soi_bgc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2soi_bgc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1fir_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  atm2soi_fir *arg1 = (atm2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_atm2soi_1fir_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  atm2soi_fir *arg1 = (atm2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(atm2soi_fir **)&jarg1; 
  result = (double) ((arg1)->orgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1atm2soi_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  atm2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (atm2soi_fir *)new atm2soi_fir();
  *(atm2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1atm2soi_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  atm2soi_fir *arg1 = (atm2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(atm2soi_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_soi2atm_1fir_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(soi2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1soi2atm_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  soi2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (soi2atm_fir *)new soi2atm_fir();
  *(soi2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1soi2atm_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  soi2atm_fir *arg1 = (soi2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(soi2atm_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->orgn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2atm_1fir_1orgn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2atm_fir **)&jarg1; 
  result = (double) ((arg1)->orgn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2atm_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2atm_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2atm_fir *)new veg2atm_fir();
  *(veg2atm_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2atm_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2atm_fir *arg1 = (veg2atm_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2atm_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->abvc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->abvc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->abvn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1abvn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->abvn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blwc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->blwc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->blwn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_veg2soi_1fir_1blwn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(veg2soi_fir **)&jarg1; 
  result = (double) ((arg1)->blwn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1veg2soi_1fir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  veg2soi_fir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (veg2soi_fir *)new veg2soi_fir();
  *(veg2soi_fir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1veg2soi_1fir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  veg2soi_fir *arg1 = (veg2soi_fir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(veg2soi_fir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1CohortLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CohortLookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CohortLookup *)new CohortLookup();
  *(CohortLookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1CohortLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CohortLookup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->dir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (std::string *) & ((arg1)->dir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cmtcode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->cmtcode = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cmtcode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (std::string *) & ((arg1)->cmtcode);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1assignBgcCalpar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->assignBgcCalpar(*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->cmax;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->cmax);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->nmax;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->nmax);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->cfall);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->cfall);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nfall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->nfall);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nfall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->nfall);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kra;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->kra);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1krb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->krb);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1krb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->krb);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1frg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->frg;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1frg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->frg);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1micbnup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->micbnup = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1micbnup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->micbnup);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcmoss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcmoss = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcmoss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->kdcmoss);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcrawc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcrawc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcrawc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->kdcrawc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcsoma = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->kdcsoma);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcsompr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->kdcsompr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kdcsomcr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kdcsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->kdcsomcr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1sla_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->sla;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1sla_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->sla);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1klai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->klai;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1klai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->klai);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vegcov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vegcov;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vegcov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->vegcov);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->lai;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->lai);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ifwoody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifwoody;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ifwoody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifwoody);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ifdeciwoody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifdeciwoody;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ifdeciwoody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifdeciwoody);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ifperenial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->ifperenial;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ifperenial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->ifperenial);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nonvascular_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->nonvascular;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nonvascular_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->nonvascular);
  jresult = SWIG_JavaArrayOutInt(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1envlai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->envlai);
    size_t ii = 0;
    for (; ii < 12; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1envlai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->envlai);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1frootfrac_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->frootfrac);
    size_t ii = 0;
    for (; ii < MAX_ROT_LAY; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1frootfrac_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->frootfrac);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdenmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snwdenmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdenmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->snwdenmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdennew_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snwdennew = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwdennew_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->snwdennew);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsnwthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initsnwthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsnwthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initsnwthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsnwdense_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initsnwdense = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsnwdense_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initsnwdense);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1maxdmossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxdmossthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1maxdmossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->maxdmossthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdmossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdmossthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdmossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initdmossthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1mosstype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mosstype = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1mosstype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (int) ((arg1)->mosstype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmossa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefmossa = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmossa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefmossa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmossb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefmossb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmossb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefmossb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initfibthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initfibthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initfibthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initfibthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1inithumthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->inithumthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1inithumthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->inithumthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefshlwa = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefshlwa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefshlwb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefshlwb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefshlwb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefdeepa = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefdeepa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefdeepb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefdeepb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefdeepb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefminea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefminea = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefminea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefminea);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmineb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->coefmineb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1coefmineb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->coefmineb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minetexture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_MIN_LAY) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->minetexture;
    for (ii = 0; ii < (size_t)MAX_MIN_LAY; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minetexture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->minetexture);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_MIN_LAY); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rtdp4gdd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rtdp4gdd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rtdp4gdd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->rtdp4gdd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1albvisnir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->albvisnir;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1albvisnir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->albvisnir);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1er_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->er;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1er_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->er);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ircoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ircoef;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ircoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->ircoef);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1iscoef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->iscoef;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1iscoef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->iscoef);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1glmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->glmax;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1glmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->glmax);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1bl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->gl_bl;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1bl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->gl_bl);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->gl_c;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1gl_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->gl_c);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1open_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vpd_open;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1open_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->vpd_open);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1close_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->vpd_close;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vpd_1close_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->vpd_close);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ppfd50_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ppfd50;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ppfd50_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->ppfd50);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegwater_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initvegwater;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegwater_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->initvegwater);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegsnow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initvegsnow;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegsnow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->initvegsnow);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snwalbmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->snwalbmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->snwalbmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1snwalbmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->snwalbmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1psimax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->psimax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1psimax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->psimax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1evapmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->evapmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1evapmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->evapmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1drainmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->drainmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1drainmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->drainmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsnwtem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initsnwtem = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsnwtem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initsnwtem);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initvwc;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->initvwc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initts;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->initts);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, 10); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->minleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1minleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->minleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1aleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->aleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1aleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->aleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1bleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->bleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1bleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->bleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cleaf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->cleaf;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cleaf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->cleaf);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kfoliage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kfoliage;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kfoliage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->kfoliage);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cov_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->cov;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cov_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->cov);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m1;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->m1);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m2;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->m2);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m3;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->m3);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->m4;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1m4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->m4);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->kc;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->kc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ki_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->ki;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1ki_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->ki);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tmin;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->tmin);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->toptmin;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->toptmin);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->toptmax;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1toptmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->toptmax);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->tmax;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1tmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->tmax);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->raq10a0;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->raq10a0);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->raq10a1;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->raq10a1);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->raq10a2;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->raq10a2);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->raq10a3;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1raq10a3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->raq10a3);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1knuptake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->knuptake;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1knuptake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->knuptake);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cpart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->cpart);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1cpart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->cpart);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initc2neven_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->initc2neven);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initc2neven_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->initc2neven);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->c2nmin);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->c2nmin);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2na_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->c2na;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2na_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->c2na);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->c2nb);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1c2nb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->c2nb);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1labncon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->labncon;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1labncon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->labncon);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rhq10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhq10 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1rhq10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->rhq10);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->moistmin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->moistmin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistopt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->moistopt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistopt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->moistopt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->moistmax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1moistmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->moistmax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lcclnc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lcclnc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1lcclnc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->lcclnc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsoma_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fsoma = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsoma_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->fsoma);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsompr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fsompr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsompr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->fsompr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsomcr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fsomcr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fsomcr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->fsomcr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1som2co2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->som2co2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1som2co2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->som2co2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kn2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kn2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1kn2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->kn2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1propftos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->propftos = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1propftos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->propftos);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nmincnsoil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nmincnsoil = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1nmincnsoil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->nmincnsoil);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fnloss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fnloss = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fnloss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->fnloss);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->initvegc);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->initvegc);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->initvegn);
    size_t ii = 0;
    for (; ii < NUM_PFT_PART; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initvegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->initvegn);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdeadc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initdeadc;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdeadc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->initdeadc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdeadn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initdeadn;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdeadn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->initdeadn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdmossc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdmossc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdmossc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initdmossc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initshlwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initshlwc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initshlwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initshlwc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdeepc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdeepc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initdeepc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initdeepc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initminec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initminec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsoln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initsoln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initsoln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initsoln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initavln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initavln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1initavln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->initavln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fvcombust_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->fvcombust);
    size_t ii = 0;
    for (; ii < NUM_FSEVR; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fvcombust_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->fvcombust);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fvslash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*arg2)[NUM_PFT] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = *(double (**)[NUM_PFT])&jarg2; 
  {
    double (*inp)[NUM_PFT] = (double (*)[NUM_PFT])(arg2);
    double (*dest)[NUM_PFT] = (double (*)[NUM_PFT])(arg1->fvslash);
    size_t ii = 0;
    for (; ii < NUM_FSEVR; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < NUM_PFT; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1fvslash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double (*result)[NUM_PFT] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double (*)[NUM_PFT])(double (*)[NUM_PFT]) ((arg1)->fvslash);
  *(double (**)[NUM_PFT])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1foslburn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_FSEVR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->foslburn;
    for (ii = 0; ii < (size_t)NUM_FSEVR; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1foslburn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double *)(double *) ((arg1)->foslburn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_FSEVR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vsmburn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vsmburn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1vsmburn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->vsmburn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1r_1retain_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->r_retain_c = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1r_1retain_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->r_retain_c);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1r_1retain_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->r_retain_n = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_CohortLookup_1r_1retain_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CohortLookup *arg1 = (CohortLookup *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CohortLookup **)&jarg1; 
  result = (double) ((arg1)->r_retain_n);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SOIL_1TXTR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SOIL_TXTR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1SM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_SM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ST1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ST1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_MAX_1ST2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_ST2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1SoilLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SoilLookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SoilLookup *)new SoilLookup();
  *(SoilLookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1SoilLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SoilLookup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1sand_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->sand;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1sand_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->sand);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1silt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->silt;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1silt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->silt);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1clay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->clay;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1clay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (int *)(int *) ((arg1)->clay);
  jresult = SWIG_JavaArrayOutInt(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksolids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Ksolids;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksolids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Ksolids);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Csolids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Csolids;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Csolids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Csolids);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Ksat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Ksat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Ksat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Psisat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->Psisat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1Psisat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->Psisat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1poro_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->poro;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1poro_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->poro);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->b;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->b);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->color;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->color);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1bulkden_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->bulkden;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1bulkden_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->bulkden);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1wiltp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->wiltp;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1wiltp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->wiltp);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1fieldcap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->fieldcap;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1fieldcap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->fieldcap);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcunfsat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcunfsat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcunfsat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcunfsat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcfrzsat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcfrzsat;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcfrzsat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcfrzsat);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcdry_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->tcdry;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1tcdry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->tcdry);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatvis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albsatvis;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatvis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albsatvis);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatnir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albsatnir;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albsatnir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albsatnir);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdryvis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albdryvis;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdryvis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albdryvis);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdrynir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *arg2 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != MAX_SOIL_TXTR) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    float *b = (float *) arg1->albdrynir;
    for (ii = 0; ii < (size_t)MAX_SOIL_TXTR; ii++) b[ii] = *((float *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1albdrynir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float *)(float *) ((arg1)->albdrynir);
  jresult = SWIG_JavaArrayOutFloat(jenv, result, MAX_SOIL_TXTR); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1hk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*arg2)[MAX_SM] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_SM])&jarg2; 
  {
    float (*inp)[MAX_SM] = (float (*)[MAX_SM])(arg2);
    float (*dest)[MAX_SM] = (float (*)[MAX_SM])(arg1->hk);
    size_t ii = 0;
    for (; ii < MAX_SOIL_TXTR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < MAX_SM; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1hk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*result)[MAX_SM] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float (*)[MAX_SM])(float (*)[MAX_SM]) ((arg1)->hk);
  *(float (**)[MAX_SM])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1psi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*arg2)[MAX_SM] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  arg2 = *(float (**)[MAX_SM])&jarg2; 
  {
    float (*inp)[MAX_SM] = (float (*)[MAX_SM])(arg2);
    float (*dest)[MAX_SM] = (float (*)[MAX_SM])(arg1->psi);
    size_t ii = 0;
    for (; ii < MAX_SOIL_TXTR; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < MAX_SM; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_SoilLookup_1psi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SoilLookup *arg1 = (SoilLookup *) 0 ;
  float (*result)[MAX_SM] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SoilLookup **)&jarg1; 
  result = (float (*)[MAX_SM])(float (*)[MAX_SM]) ((arg1)->psi);
  *(float (**)[MAX_SM])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Cohort(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Cohort *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Cohort *)new Cohort();
  *(Cohort **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Cohort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Cohort **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1errorid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->errorid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Cohort_1errorid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (int) ((arg1)->errorid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1failed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->failed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Cohort_1failed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (bool) ((arg1)->failed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1timer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Timer **)&jarg2; 
  if (arg1) (arg1)->timer = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1timer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Timer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (Timer *) ((arg1)->timer);
  *(Timer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1chtlu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  CohortLookup *arg2 = (CohortLookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(CohortLookup **)&jarg2; 
  if (arg1) (arg1)->chtlu = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1chtlu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  CohortLookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (CohortLookup *)& ((arg1)->chtlu);
  *(CohortLookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1atm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Atmosphere arg2 ;
  Atmosphere *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Atmosphere **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Atmosphere");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->atm = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1atm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Atmosphere result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->atm);
  *(Atmosphere **)&jresult = new Atmosphere((const Atmosphere &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1veg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation arg2 ;
  Vegetation *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Vegetation **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Vegetation");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->veg = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1veg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->veg);
  *(Vegetation **)&jresult = new Vegetation((const Vegetation &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ground_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Ground arg2 ;
  Ground *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Ground **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ground");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ground = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ground_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Ground result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->ground);
  *(Ground **)&jresult = new Ground((const Ground &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vegenv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Env *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Vegetation_Env **)&jarg2; 
  {
    size_t ii;
    Vegetation_Env *b = (Vegetation_Env *) arg1->vegenv;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((Vegetation_Env *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vegenv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (Vegetation_Env *)(Vegetation_Env *) ((arg1)->vegenv);
  *(Vegetation_Env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1snowenv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Snow_Env arg2 ;
  Snow_Env *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Snow_Env **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Snow_Env");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->snowenv = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1snowenv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Snow_Env result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->snowenv);
  *(Snow_Env **)&jresult = new Snow_Env((const Snow_Env &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1soilenv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Soil_Env arg2 ;
  Soil_Env *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Soil_Env **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Soil_Env");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->soilenv = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1soilenv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Soil_Env result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->soilenv);
  *(Soil_Env **)&jresult = new Soil_Env((const Soil_Env &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1solprntenv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  SoilParent_Env arg2 ;
  SoilParent_Env *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(SoilParent_Env **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SoilParent_Env");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->solprntenv = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1solprntenv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  SoilParent_Env result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->solprntenv);
  *(SoilParent_Env **)&jresult = new SoilParent_Env((const SoilParent_Env &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vegbgc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Bgc *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Vegetation_Bgc **)&jarg2; 
  {
    size_t ii;
    Vegetation_Bgc *b = (Vegetation_Bgc *) arg1->vegbgc;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((Vegetation_Bgc *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1vegbgc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Vegetation_Bgc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (Vegetation_Bgc *)(Vegetation_Bgc *) ((arg1)->vegbgc);
  *(Vegetation_Bgc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1soilbgc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  Soil_Bgc arg2 ;
  Soil_Bgc *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(Soil_Bgc **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Soil_Bgc");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->soilbgc = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1soilbgc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  Soil_Bgc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->soilbgc);
  *(Soil_Bgc **)&jresult = new Soil_Bgc((const Soil_Bgc &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fire_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cohort *arg1 = (Cohort *) 0 ;
  WildFire arg2 ;
  WildFire *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  argp2 = *(WildFire **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null WildFire");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->fire = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fire_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  WildFire result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result =  ((arg1)->fire);
  *(WildFire **)&jresult = new WildFire((const WildFire &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outbuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  OutRetrive *arg2 = (OutRetrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(OutRetrive **)&jarg2; 
  if (arg1) (arg1)->outbuffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1outbuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  OutRetrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (OutRetrive *)& ((arg1)->outbuffer);
  *(OutRetrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  {
    size_t ii;
    EnvData *b = (EnvData *) arg1->ed;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((EnvData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1ed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (EnvData *)(EnvData *) ((arg1)->ed);
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1bd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  BgcData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(BgcData **)&jarg2; 
  {
    size_t ii;
    BgcData *b = (BgcData *) arg1->bd;
    for (ii = 0; ii < (size_t)NUM_PFT; ii++) b[ii] = *((BgcData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1bd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  BgcData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (BgcData *)(BgcData *) ((arg1)->bd);
  *(BgcData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1edall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  if (arg1) (arg1)->edall = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1edall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (EnvData *) ((arg1)->edall);
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1bdall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  BgcData *arg2 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(BgcData **)&jarg2; 
  if (arg1) (arg1)->bdall = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1bdall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  BgcData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (BgcData *) ((arg1)->bdall);
  *(BgcData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  FirData *arg2 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(FirData **)&jarg2; 
  if (arg1) (arg1)->fd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1fd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  FirData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (FirData *) ((arg1)->fd);
  *(FirData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1md_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  if (arg1) (arg1)->md = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1md_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  ModelData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (ModelData *) ((arg1)->md);
  *(ModelData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (GridData *) ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (CohortData *)& ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RestartData *arg2 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RestartData **)&jarg2; 
  if (arg1) (arg1)->resid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Cohort_1resid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cohort *arg1 = (Cohort *) 0 ;
  RestartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  result = (RestartData *)& ((arg1)->resid);
  *(RestartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1initSubmodules(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->initSubmodules();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(Timer **)&jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setModelData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Cohort *arg1 = (Cohort *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  (arg1)->setModelData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setInputData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Cohort *arg1 = (Cohort *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  GridData *arg3 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  arg3 = *(GridData **)&jarg3; 
  (arg1)->setInputData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1setProcessData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Cohort *arg1 = (Cohort *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  BgcData *arg3 = (BgcData *) 0 ;
  FirData *arg4 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Cohort **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  arg3 = *(BgcData **)&jarg3; 
  arg4 = *(FirData **)&jarg4; 
  (arg1)->setProcessData(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1initStatePar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->initStatePar();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1prepareAllDrivingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Cohort *arg1 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  (arg1)->prepareAllDrivingData();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1prepareDayDrivingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->prepareDayDrivingData((int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Cohort_1updateMonthly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  Cohort *arg1 = (Cohort *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cohort **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  (arg1)->updateMonthly((int const &)*arg2,(int const &)*arg3,(int const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Controller(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Controller *)new Controller();
  *(Controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Controller *arg1 = (Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Controller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1controlfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Controller *arg1 = (Controller *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->controlfile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_Controller_1controlfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Controller *arg1 = (Controller *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  result = (std::string *) & ((arg1)->controlfile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1ctrl4run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Controller *arg1 = (Controller *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Controller **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  (arg1)->ctrl4run(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Controller_1assignJcontrolfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Controller *arg1 = (Controller *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Controller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->assignJcontrolfile(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Grid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Grid *)new Grid();
  *(Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Grid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Grid *arg1 = (Grid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Grid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Grid_1reinit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (int)(arg1)->reinit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1setEnvData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  (arg1)->setEnvData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1setBgcData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  BgcData *arg2 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(BgcData **)&jarg2; 
  (arg1)->setBgcData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1setRegionData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  (arg1)->setRegionData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1grded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  if (arg1) (arg1)->grded = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1grded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (EnvData *) ((arg1)->grded);
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1grdbd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  BgcData *arg2 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(BgcData **)&jarg2; 
  if (arg1) (arg1)->grdbd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1grdbd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  BgcData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (BgcData *) ((arg1)->grdbd);
  *(BgcData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (RegionData *) ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Grid_1gd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Grid *arg1 = (Grid *) 0 ;
  GridData *arg2 = (GridData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Grid **)&jarg1; 
  arg2 = *(GridData **)&jarg2; 
  if (arg1) (arg1)->gd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Grid_1gd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Grid *arg1 = (Grid *) 0 ;
  GridData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Grid **)&jarg1; 
  result = (GridData *)& ((arg1)->gd);
  *(GridData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1ModelData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ModelData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ModelData *)new ModelData();
  *(ModelData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1ModelData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModelData *arg1 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1myid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->myid = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1myid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->myid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1numprocs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numprocs = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1numprocs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->numprocs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runmode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->runmode = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runmode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->runmode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1consoledebug_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->consoledebug = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1consoledebug_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->consoledebug);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1envmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->envmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1envmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->envmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1bgcmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bgcmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1bgcmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->bgcmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1dvmmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dvmmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1dvmmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->dvmmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1dslmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dslmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1dslmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->dslmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1dsbmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dsbmodule = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1dsbmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->dsbmodule);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1friderived_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->friderived = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1friderived_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->friderived);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1nfeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->nfeed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1nfeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->nfeed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1avlnflg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->avlnflg = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1avlnflg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->avlnflg);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1baseline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->baseline = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1baseline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->baseline);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runeq = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runeq);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runsp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runsp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runtr = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runtr);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->runsc = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runsc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->runsc);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->initmode = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->initmode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1casename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->casename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1casename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->casename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1configdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->configdir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1configdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->configdir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runchtfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->runchtfile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runchtfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->runchtfile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->outputdir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->outputdir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1reginputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reginputdir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1reginputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->reginputdir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1grdinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->grdinputdir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1grdinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->grdinputdir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1chtinputdir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->chtinputdir = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1chtinputdir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->chtinputdir);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runstages_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->runstages = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1runstages_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->runstages);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->initmodes = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initmodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->initmodes);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initialfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->initialfile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_TEMJNI_temcoreJNI_ModelData_1initialfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (std::string *) & ((arg1)->initialfile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeclimate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->changeclimate = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeclimate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->changeclimate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeco2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->changeco2 = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1changeco2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->changeco2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1updatelai_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->updatelai = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1updatelai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->updatelai);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1useseverity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useseverity = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1useseverity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->useseverity);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outstartyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->outstartyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outstartyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->outstartyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSiteDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSiteDay = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSiteDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->outSiteDay);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSiteMonth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSiteMonth = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSiteMonth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->outSiteMonth);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSiteYear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSiteYear = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSiteYear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->outSiteYear);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outRegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outRegn = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outRegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->outRegn);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSoilClm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outSoilClm = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_ModelData_1outSoilClm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (bool) ((arg1)->outSoilClm);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1gridno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_gridno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1gridno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_gridno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1drainno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_drainno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1drainno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_drainno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1soilno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_soilno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1soilno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_soilno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1gfireno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_gfireno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1gfireno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_gfireno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1chtno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_chtno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1chtno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_chtno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1initchtno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_initchtno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1initchtno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_initchtno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1clmno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_clmno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1clmno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_clmno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1clmyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_clmyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1clmyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_clmyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1vegno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_vegno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1vegno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_vegno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1vegset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_vegset = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1vegset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_vegset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1fireno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_fireno = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1fireno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_fireno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1fireset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ModelData *arg1 = (ModelData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->act_fireset = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_ModelData_1act_1fireset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ModelData *arg1 = (ModelData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  result = (int) ((arg1)->act_fireset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_ModelData_1checking4run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ModelData *arg1 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelData **)&jarg1; 
  (arg1)->checking4run();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1OutRetrive(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutRetrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutRetrive *)new OutRetrive();
  *(OutRetrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1OutRetrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutRetrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1cohortcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->cohortcount = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1cohortcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  result = (int) ((arg1)->cohortcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1envoddly_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  EnvDataDly (*arg2)[31] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(EnvDataDly (**)[31])&jarg2; 
  {
    EnvDataDly (*inp)[31] = (EnvDataDly (*)[31])(arg2);
    EnvDataDly (*dest)[31] = (EnvDataDly (*)[31])(arg1->envoddly);
    size_t ii = 0;
    for (; ii < NUM_PFT; ++ii) {
      EnvDataDly *ip = inp[ii];
      EnvDataDly *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 31; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1envoddly_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  EnvDataDly (*result)[31] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  result = (EnvDataDly (*)[31])(EnvDataDly (*)[31]) ((arg1)->envoddly);
  *(EnvDataDly (**)[31])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1envoddlyall_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  EnvDataDly *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(EnvDataDly **)&jarg2; 
  {
    size_t ii;
    EnvDataDly *b = (EnvDataDly *) arg1->envoddlyall;
    for (ii = 0; ii < (size_t)31; ii++) b[ii] = *((EnvDataDly *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1envoddlyall_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  EnvDataDly *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  result = (EnvDataDly *)(EnvDataDly *) ((arg1)->envoddlyall);
  *(EnvDataDly **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1regnod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  OutDataRegn *arg2 = (OutDataRegn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(OutDataRegn **)&jarg2; 
  if (arg1) (arg1)->regnod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1regnod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  OutDataRegn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  result = (OutDataRegn *) ((arg1)->regnod);
  *(OutDataRegn **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1resod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  RestartData *arg2 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(RestartData **)&jarg2; 
  if (arg1) (arg1)->resod = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1resod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  RestartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  result = (RestartData *) ((arg1)->resod);
  *(RestartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1setDimensionData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  (arg1)->setDimensionData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1setProcessData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  int *arg2 = 0 ;
  EnvData *arg3 = (EnvData *) 0 ;
  BgcData *arg4 = (BgcData *) 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OutRetrive **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(EnvData **)&jarg3; 
  arg4 = *(BgcData **)&jarg4; 
  (arg1)->setProcessData((int const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1setFireData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  FirData *arg2 = (FirData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(FirData **)&jarg2; 
  (arg1)->setFireData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1setRegnOutData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  OutDataRegn *arg2 = (OutDataRegn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(OutDataRegn **)&jarg2; 
  (arg1)->setRegnOutData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1setRestartOutData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  RestartData *arg2 = (RestartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OutRetrive **)&jarg1; 
  arg2 = *(RestartData **)&jarg2; 
  (arg1)->setRestartOutData(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1assignSiteDlyOutputBuffer_1Env(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  snwstate_dim arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  snwstate_dim *argp2 ;
  int temp3 ;
  int temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OutRetrive **)&jarg1; 
  argp2 = *(snwstate_dim **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null snwstate_dim");
    return ;
  }
  arg2 = *argp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  (arg1)->assignSiteDlyOutputBuffer_Env(arg2,(int const &)*arg3,(int const &)*arg4);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1updateRegnOutputBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateRegnOutputBuffer((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_OutRetrive_1updateRestartOutputBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OutRetrive *arg1 = (OutRetrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutRetrive **)&jarg1; 
  (arg1)->updateRestartOutputBuffer();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Region(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Region *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Region *)new Region();
  *(Region **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Region(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Region *arg1 = (Region *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Region **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Region_1rd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Region *arg1 = (Region *) 0 ;
  RegionData *arg2 = (RegionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Region **)&jarg1; 
  arg2 = *(RegionData **)&jarg2; 
  if (arg1) (arg1)->rd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Region_1rd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Region *arg1 = (Region *) 0 ;
  RegionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Region **)&jarg1; 
  result = (RegionData *)& ((arg1)->rd);
  *(RegionData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Region_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Region *arg1 = (Region *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Region **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Region_1getinitco2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Region *arg1 = (Region *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Region **)&jarg1; 
  (arg1)->getinitco2();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1Timer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Timer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Timer *)new Timer();
  *(Timer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1Timer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Timer *arg1 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Timer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1md_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Timer *arg1 = (Timer *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  if (arg1) (arg1)->md = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_Timer_1md_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  ModelData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (ModelData *) ((arg1)->md);
  *(ModelData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1yearind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yearind = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1yearind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->yearind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1monind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->monind = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1monind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->monind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1stageyrind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stageyrind = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1stageyrind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->stageyrind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1outyrind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->outyrind = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1outyrind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->outyrind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1eqend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->eqend = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Timer_1eqend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (bool) ((arg1)->eqend);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spend = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Timer_1spend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (bool) ((arg1)->spend);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1trend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->trend = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Timer_1trend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (bool) ((arg1)->trend);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1scend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->scend = arg2;
}


SWIGEXPORT jboolean JNICALL Java_TEMJNI_temcoreJNI_Timer_1scend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (bool) ((arg1)->scend);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1maxeqrunyrs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxeqrunyrs = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1maxeqrunyrs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->maxeqrunyrs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spbegyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spbegyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1spbegyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->spbegyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spendyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spendyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1spendyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->spendyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1spnumyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spnumyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1spnumyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->spnumyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1trbegyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trbegyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1trbegyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->trbegyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1trendyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trendyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1trendyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->trendyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1trnumyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trnumyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1trnumyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->trnumyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1scbegyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scbegyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1scbegyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->scbegyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1scendyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scendyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1scendyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->scendyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1scnumyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scnumyr = arg2;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1scnumyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int) ((arg1)->scnumyr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1setModeldata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Timer *arg1 = (Timer *) 0 ;
  ModelData *arg2 = (ModelData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = *(ModelData **)&jarg2; 
  (arg1)->setModeldata(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Timer *arg1 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getOutputYearIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getOutputYearIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getCalendarYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getCalendarYear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getDOYIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->getDOYIndex((int const &)*arg2,(int const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getDaysInMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getDaysInMonth(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getCurrentMonthIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getCurrentMonthIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getNextMonthIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getNextMonthIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TEMJNI_temcoreJNI_Timer_1getCurrentYearIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  result = (int)(arg1)->getCurrentYearIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_Timer_1advanceOneMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Timer *arg1 = (Timer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Timer **)&jarg1; 
  (arg1)->advanceOneMonth();
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_new_1TEMccjava(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TEMccjava *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TEMccjava *)new TEMccjava();
  *(TEMccjava **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_delete_1TEMccjava(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TEMccjava **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1cht_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  Cohort *arg2 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(Cohort **)&jarg2; 
  if (arg1) (arg1)->cht = arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1cht_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  Cohort *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (Cohort *) ((arg1)->cht);
  *(Cohort **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initvegc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initvegc;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initvegc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double *)(double *) ((arg1)->initvegc);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initvegn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != NUM_PFT_PART) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->initvegn;
    for (ii = 0; ii < (size_t)NUM_PFT_PART; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initvegn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double *)(double *) ((arg1)->initvegn);
  jresult = SWIG_JavaArrayOutDouble(jenv, result, NUM_PFT_PART); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdeadc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdeadc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdeadc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initdeadc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdeadn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdeadn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdeadn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initdeadn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdmossthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdmossthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdmossthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initdmossthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initfibthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initfibthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initfibthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initfibthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1inithumthick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->inithumthick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1inithumthick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->inithumthick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdmossc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdmossc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdmossc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initdmossc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initshlwc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initshlwc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initshlwc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initshlwc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdeepc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initdeepc = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initdeepc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initdeepc);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initminec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initminec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initminec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initminec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initsoln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initsoln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initsoln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initsoln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initavln_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->initavln = arg2;
}


SWIGEXPORT jdouble JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1initavln_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (double) ((arg1)->initavln);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1ed1pft_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  EnvData *arg2 = (EnvData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(EnvData **)&jarg2; 
  if (arg1) (arg1)->ed1pft = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1ed1pft_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  EnvData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (EnvData *)& ((arg1)->ed1pft);
  *(EnvData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1bd1pft_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  BgcData *arg2 = (BgcData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(BgcData **)&jarg2; 
  if (arg1) (arg1)->bd1pft = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1bd1pft_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  BgcData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (BgcData *)& ((arg1)->bd1pft);
  *(BgcData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1cd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  CohortData *arg2 = (CohortData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(CohortData **)&jarg2; 
  if (arg1) (arg1)->cd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1cd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  CohortData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (CohortData *)& ((arg1)->cd);
  *(CohortData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1vcalpar1pft_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  vegpar_cal *arg2 = (vegpar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(vegpar_cal **)&jarg2; 
  if (arg1) (arg1)->vcalpar1pft = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1vcalpar1pft_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  vegpar_cal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (vegpar_cal *)& ((arg1)->vcalpar1pft);
  *(vegpar_cal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1scalpar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  soipar_cal *arg2 = (soipar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(soipar_cal **)&jarg2; 
  if (arg1) (arg1)->scalpar = *arg2;
}


SWIGEXPORT jlong JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1scalpar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  soipar_cal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  result = (soipar_cal *)& ((arg1)->scalpar);
  *(soipar_cal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1setCohort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  Cohort *arg2 = (Cohort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(Cohort **)&jarg2; 
  (arg1)->setCohort(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1setInitVbState1pft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->setInitVbState1pft((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1setInitSbState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  (arg1)->setInitSbState();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1setVbCalPar1pft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  int *arg2 = 0 ;
  vegpar_cal *arg3 = (vegpar_cal *) 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(TEMccjava **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(vegpar_cal **)&jarg3; 
  (arg1)->setVbCalPar1pft((int const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1setSbCalPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  soipar_cal *arg2 = (soipar_cal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TEMccjava **)&jarg1; 
  arg2 = *(soipar_cal **)&jarg2; 
  (arg1)->setSbCalPar(arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1getInitVbState1pft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->getInitVbState1pft((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1getInitSbState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  (arg1)->getInitSbState();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1getVbCalPar1pft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->getVbCalPar1pft((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1getSbCalPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  (arg1)->getSbCalPar();
}


SWIGEXPORT void JNICALL Java_TEMJNI_temcoreJNI_TEMccjava_1getData1pft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TEMccjava *arg1 = (TEMccjava *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TEMccjava **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->getData1pft((int const &)*arg2);
}


#ifdef __cplusplus
}
#endif

